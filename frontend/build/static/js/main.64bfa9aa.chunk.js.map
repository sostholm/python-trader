{"version":3,"sources":["logo.svg","services/index.js","components/Login/index.js","components/dialogs/password-dialog/index.jsx","components/add-account/index.js","components/add-wallet/index.jsx","components/add-token/index.jsx","components/user-heartbeat/index.js","components/balance-list/index.js","components/balance/index.js","components/Coin/index.jsx","components/push-notification/index.js","components/settings/index.jsx","components/drawer/index.js","views/carousel/index.js","App.js","serviceWorkerRegistration.js","reportWebVitals.js","index.js"],"names":["logout","window","location","reload","API_URL","Dexie","version","stores","token","useStyles","makeStyles","theme","root","display","flexFlow","margin","spacing","width","Login","props","useState","username","setUsername","password","setPassword","classes","loggedIn","login","a","console","log","fetch","method","body","JSON","stringify","then","result","json","payload","setToken","setLoggedIn","setView","className","TextField","id","variant","value","onChange","ev","target","label","type","Button","color","onClick","PasswordDialog","React","open","setOpen","useEffect","handleClose","Dialog","onClose","aria-labelledby","aria-describedby","DialogTitle","DialogContent","autocomplete","DialogActions","autoFocus","formControl","minWidth","EXCHANGES","gql","ADD_ACCOUNT","AddAccount","apiKey","setApiKey","apiSecret","setApiSecret","exchange","setExchange","useMutation","add_account","data","useQuery","loading","error","variables","secret","exchangeName","invisible","FormControl","InputLabel","Select","labelId","exchanges","map","item","MenuItem","name","WALLET_TYPES","ADD_WALLET","AddWallet","setName","address","setAddress","walletType","setWalletType","add_wallet","wallet_data","wallet_type_id","walletTypes","MY_WALLETS","ADD_TOKEN","AddToken","walletName","setWalletName","add_token","me","wallets","MY_BALANCE","UserHeartbeat","alive","setAlive","pollInterval","last_update","Date","lastUpdate","height","viewBox","transform","fill","d","attributeName","values","dur","repeatCount","additive","createUseStyles","list","row_root","gridTemplateColumns","gridTemplateRows","gridTemplateAreas","marginTop","border","boxSizing","padding","backgroundColor","row_top","row_image","background","fontSize","justifyContent","alignItems","card_title","gridArea","justifySelf","icon","percentage","fontWeight","table","alignmContent","divider","BalanceList","red_or_green","val","Row","currency","toLowerCase","Math","round","portfolio_percentage","style","priceChangePercentage1hInCurrency","priceChangePercentage24hInCurrency","priceChangePercentage7dInCurrency","Balance","usd","setUsd","listData","setlistData","above_1","Object","portfolio","filter","parseFloat","sort","b","reverse","portfolioValue","coin_root","applicationServerKey","base64String","rawData","base64","repeat","length","replace","atob","Uint8Array","from","char","charCodeAt","urlBase64ToUint8Array","subscribeUser","func","Notification","requestPermission","status","navigator","serviceWorker","ready","reg","pushManager","subscribe","userVisibleOnly","sub","endpoint","URL","origin","toJSON","periodicSync","register","minInterval","catch","e","permission","warn","ADD_SUBSCRIPTION","Settings","add_subscription","p256dh","keys","auth","fullList","menuButton","position","left","top","Drawer","anchor","state","setState","toggleDrawer","event","key","IconButton","aria-label","component","SwipeableDrawer","onOpen","clsx","role","onKeyDown","List","views","view","index","ListItem","button","text","ListItemText","primary","scene","perspective","carousel","transformStyle","carousel__cell","darkTheme","createMuiTheme","palette","App","client","setClient","httpLink","createHttpLink","uri","authLink","setContext","_","headers","authorization","errorLink","onError","graphQLErrors","networkError","err","extensions","code","alert","message","bodyText","ApolloClient","link","concat","cache","InMemoryCache","createGQL","ThemeProvider","isLocalhost","Boolean","hostname","match","registerValidSW","swUrl","config","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","process","href","addEventListener","response","contentType","get","indexOf","unregister","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"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","file":"static/js/main.64bfa9aa.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import { ApolloClient, createHttpLink, InMemoryCache } from '@apollo/client'\nimport { onError } from \"@apollo/client/link/error\"\nimport { setContext } from '@apollo/client/link/context'\n\nconst logout = () => {\n  window.location.reload()\n}\n\nlet url\nif (process.env.NODE_ENV === 'development') url = 'http://localhost:3002'\nelse url = 'https://mainframe:8000'\n\nexport const API_URL = url\n\n// const db = new Dexie('python-trader');\n// db.version(1).stores({\n//   token: \"++id,token\"\n// });\n\nexport const fetcher = async (gql, token) => {\n  const response = await fetch(API_URL + '/graphql', {\n    method: 'POST',\n    cache: 'no-cache',\n    headers: {\n      'Content-Type': 'application/json',\n      'Authorization': `Bearer ${token}`,\n    },\n    body: JSON.stringify({\"query\": gql})\n  })\n\n  return response.json()\n}\n\nexport const update_token = (token) => `\nmutation{\n  updateToken(token: \"${token}\"){\n    token\n  }\n}\n`\n\nexport const refresh_token = async (old) => {\n  const result = await fetcher(update_token(old), old)\n  return result.data.updateToken.token\n}\n\nexport function createGQL(token) {\n  const httpLink = createHttpLink({\n    uri: API_URL + '/graphql',\n  });\n\n  const authLink = setContext((_, { headers }) => {\n\n    return {\n      headers: {\n        ...headers,\n        authorization: token ? `Bearer ${token}` : \"\",\n      }\n    }\n  });\n\n  const errorLink = onError(({ graphQLErrors, networkError }) => {\n    if (graphQLErrors) {\n      for (let err of graphQLErrors) {\n        if(err.extensions && err.extensions.code == 'UNAUTHENTICATED') logout()\n        else{\n          alert(err.message)\n          console.log(err)\n        }\n      }\n    }\n    if (networkError) {\n      if (networkError.bodyText === 'Signature has expired') logout()\n      else console.log(`[Network error]: ${networkError}`)\n    }\n  })\n\n  return new ApolloClient({\n    link: authLink.concat(errorLink).concat(httpLink),\n    cache: new InMemoryCache()\n  });\n}\n\nexport const user_balance = `\n{\n    binance{\n        balance{\n        currency\n        total\n        usd\n        }\n    }\n    cryptoCdc{\n        balance{\n        currency\n        total\n        usd\n        }\n    }\n    gateio{\n        balance{\n        currency\n        total\n        usd\n        }\n    }\n}\n`\nexport const my_balance = () => `\nquery{\n  me{\n    portfolio{\n      currency\n      total\n      usd\n    }\n  }\n}\n\n`\n\nexport const get_exchanges = () => `\nquery{\n    exchanges{\n        id\n        name\n    }\n}\n`\n\nexport const get_wallet_types = () => `\nquery{\n  walletTypes{\n    id\n    name\n  }\n}\n`\n\nexport const add_account = (api_key, api_secret, exchange_id) => `\nmutation{\n    addAccount(apiKey:\"${api_key}\", secret: \"${api_secret}\", exchangeId: \"${exchange_id}\"){\n      account{\n        apiKey\n      }\n    }\n  }\n`\n\nexport const add_wallet = (name, address, wallet_type_id) => `\nmutation{\n  addWallet(name: \"${name}\", address: \"${address}\", walletType: \"${wallet_type_id}\"){\n    wallet{\n      name\n    }\n  }\n}\n`\nexport const add_token = (token, wallet_name) => `\nmutation{\n  addToken(token:\"${token}\", walletName: \"${wallet_name}\"){\n    token\n  }\n}\n`\n\nexport const get_accounts = () => `\nquery{\n    accounts{\n          exchange{\n        name\n      }\n    }\n  }\n`\n\nexport const get_wallets = () => `\nquery{\n  wallets{\n    name\n  }\n}\n`\n\nexport const get_exchange_balance = (exchange) => {\n  const exchange_query = (ex) => `\n  ${ex}{\n      balance{\n        currency\n        available\n        usd\n      }\n    } \n  `\n  if (!Array.isArray(exchange)) {\n    exchange = [exchange]\n  }\n\n  return 'query{' + exchange.map(ex => exchange_query(ex.exchange.name)).join('\\n') + '}'\n}\n\nexport const updateSubscription = (subinfo) => {\n  console.log(subinfo)\n  return `\nmutation{\n  addSubscription(endpoint: \"${subinfo.endpoint}\", expirationTime: \"${subinfo.expirationTime}\", p256dh: \"${subinfo.keys.p256dh}\", auth: \"${subinfo.keys.auth}\"){\n    stuff\n  }\n}\n`\n}\n","import React, { useState } from 'react'\nimport { makeStyles } from '@material-ui/core/styles';\nimport TextField from '@material-ui/core/TextField';\nimport Button from '@material-ui/core/Button';\nimport Dexie from 'dexie'\n\nimport { API_URL } from 'services'\n\nconst db = new Dexie('python-trader');\ndb.version(1).stores({\n  token: \"++id,token\"\n});\n\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        display: 'flex',\n        flexFlow: 'column',\n        '& > *': {\n            margin: theme.spacing(1),\n            width: '25ch',\n        },\n    },\n}));\n\nexport default function Login(props) {\n    const [username, setUsername] = useState('')\n    const [password, setPassword] = useState('')\n    const classes = useStyles();\n\n    if (props.loggedIn) return <></>\n\n    const login = async () => {\n        console.log(\"Sending websocket data\")\n        const payload = await fetch( API_URL + '/login', { method: 'POST', body: JSON.stringify({ 'username': username, 'password': password }) }).then(result => result.json())\n        props.setToken(payload.token)\n        // await props.getQuery({'username': username, 'password': password})\n        props.setLoggedIn(true, props.setView('Balance'))\n    }\n\n    return (\n        <div className={classes.root}>\n            <TextField\n                id=\"outlined-basic\"\n                variant=\"outlined\"\n                value={username}\n                onChange={ev => setUsername(ev.target.value)}\n                label=\"Username\"\n            />\n            <TextField\n                id=\"outlined-basic\"\n                variant=\"outlined\"\n                value={password}\n                onChange={ev => setPassword(ev.target.value)}\n                label=\"Password\"\n                type=\"password\"\n            />\n            <Button variant=\"contained\" color=\"primary\" onClick={login}>Login</Button>\n        </div>\n    )\n}","import React, {useEffect} from 'react'\nimport Button from '@material-ui/core/Button'\nimport Dialog from '@material-ui/core/Dialog'\nimport DialogActions from '@material-ui/core/DialogActions'\nimport DialogContent from '@material-ui/core/DialogContent'\nimport DialogTitle from '@material-ui/core/DialogTitle'\nimport TextField from '@material-ui/core/TextField'\nimport PropTypes from 'prop-types'\n\nexport default function PasswordDialog(props) {\n  const [open, setOpen]         = React.useState(false)\n  const [password, setPassword] = React.useState('')\n\n  useEffect(()=> setOpen(props.open),[props.open])\n\n  const handleClickOpen = () => {\n    setOpen(true)\n  }\n\n  const handleClose = () => {\n    props.setPassword(password)\n    setOpen(false)\n  }\n\n  return (\n    <div>\n      <Dialog\n        open={open}\n        onClose={handleClose}\n        aria-labelledby=\"alert-dialog-title\"\n        aria-describedby=\"alert-dialog-description\"\n      >\n        <DialogTitle id=\"alert-dialog-title\">{\"This action requires your password.\"}</DialogTitle>\n        <DialogContent>\n            <TextField \n                id=\"outlined-basic\"  \n                variant=\"outlined\" \n                value={password} \n                onChange={ev => setPassword(ev.target.value)}\n                label=\"Password\"\n                autocomplete=\"off\"\n            />\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={handleClose} color=\"primary\">\n            CANCEL\n          </Button>\n          <Button onClick={handleClose} color=\"primary\" autoFocus>\n            OK\n          </Button>\n        </DialogActions>\n      </Dialog>\n    </div>\n  )\n}\n\nPasswordDialog.propTypes = {\n    setPassword: PropTypes.func,\n    open: PropTypes.bool\n}","import React, {useState, useEffect} from 'react'\nimport { makeStyles } from '@material-ui/core/styles'\nimport TextField from '@material-ui/core/TextField'\nimport Button from '@material-ui/core/Button'\nimport Select from '@material-ui/core/Select'\nimport MenuItem from '@material-ui/core/MenuItem'\nimport InputLabel from '@material-ui/core/InputLabel'\nimport FormControl from '@material-ui/core/FormControl'\nimport { useQuery, useMutation, gql } from '@apollo/client'\nimport PasswordDialog from 'components/dialogs/password-dialog'\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        display: 'flex',\n        flexFlow: 'column',\n        '& > *': {\n            margin: theme.spacing(1),\n            width: '25ch',\n      },\n    },\n    formControl: {\n        margin: theme.spacing(1),\n        minWidth: 120,\n      },\n  }));\n\nconst EXCHANGES = gql`\nquery{\n    exchanges{\n        name\n    }\n}\n`\n\nconst ADD_ACCOUNT = gql`\n  mutation addAccount($apiKey: String!, $secret: String!, $password: String!,$exchangeName: String!){\n    addAccount(apiKey: $apiKey, secret: $secret, password: $password,exchangeName: $exchangeName){\n        account{\n            apiKey\n        }\n    }\n  }\n  `\n  \n\nexport default function AddAccount(props){\n    const [apiKey, setApiKey] = useState('')\n    const [apiSecret, setApiSecret] = useState('')\n    const [password, setPassword] = useState('')\n    const [exchange, setExchange] = useState()\n    const classes = useStyles()\n    const [add_account, { data: mutation_data }] = useMutation(ADD_ACCOUNT)\n    const { loading, error, data } = useQuery(EXCHANGES)\n\n    async function addAccount(){\n        await add_account({\n                variables: {\n                    apiKey: apiKey, \n                    secret: apiSecret,\n                    password: password,\n                    exchangeName: exchange\n            }\n        })\n    }\n\n    if(props.invisible) return <></>\n\n    return(\n        <div className={classes.root}>\n            <PasswordDialog setPassword={setPassword} open={password === ''}/>\n            <FormControl className={classes.formControl}>\n                <InputLabel id=\"demo-simple-select-label\">Exchange</InputLabel>\n                <Select\n                labelId=\"demo-simple-select-label\"\n                id=\"demo-simple-select\"\n                value={exchange}\n                onChange={(ev) => setExchange(ev.target.value)}\n                >\n                {\n                    data && (\n                        data.exchanges.map(item => <MenuItem value={item.name}>{item.name}</MenuItem>)\n                    )\n                }\n                </Select>\n            </FormControl>\n            <TextField \n                id=\"outlined-basic\"  \n                variant=\"outlined\" \n                value={apiKey} \n                onChange={ev => setApiKey(ev.target.value)}\n                label=\"Api Key\"\n                autocomplete=\"off\"\n            />\n            <TextField \n                id=\"outlined-basic\" \n                variant=\"outlined\" \n                value={apiSecret} \n                onChange={ev => setApiSecret(ev.target.value)}\n                label=\"Api Secret\"\n                type=\"password\"\n                autocomplete=\"off\"\n            />\n            <Button variant=\"contained\" color=\"primary\" onClick={addAccount}>Add Account</Button>\n        </div>\n    )\n}","import React, {useState, useEffect} from 'react'\nimport { makeStyles } from '@material-ui/core/styles'\nimport TextField from '@material-ui/core/TextField'\nimport Button from '@material-ui/core/Button'\nimport Select from '@material-ui/core/Select'\nimport MenuItem from '@material-ui/core/MenuItem'\nimport InputLabel from '@material-ui/core/InputLabel'\nimport FormControl from '@material-ui/core/FormControl'\nimport { useQuery, useMutation, gql } from '@apollo/client'\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        display: 'flex',\n        flexFlow: 'column',\n        '& > *': {\n            margin: theme.spacing(1),\n            width: '25ch',\n      },\n    },\n    formControl: {\n        margin: theme.spacing(1),\n        minWidth: 120,\n      },\n  }));\n\nconst WALLET_TYPES = gql`\nquery{\n    walletTypes{\n      name\n    }\n}\n`\n\nconst ADD_WALLET = gql`\nmutation addWallet($name: String!, $address: String!, $wallet_type_id: String!){\n    addWallet(name: $name, address: $address, wallet_type_id: $wallet_type_id){\n        wallet{\n            name\n        }\n    }\n}\n`\n\nexport default function AddWallet(props){\n    const [name, setName] = useState('')\n    const [address, setAddress] = useState('')\n    const [walletType, setWalletType] = useState()\n    const [menuItems, setMenuItems] = useState()\n    const classes = useStyles()\n    const [add_wallet, { data }] = useMutation(ADD_WALLET)\n    const { loading, error, data: wallet_data } = useQuery(WALLET_TYPES)\n\n    async function addWallet(){\n        await add_wallet({\n                variables: {\n                    name: name, \n                    address: address,\n                    wallet_type_id: walletType\n            }\n        })\n    }\n\n    if(props.invisible) return <></>\n\n    return(\n        <div className={classes.root}>\n            <FormControl className={classes.formControl}>\n                <InputLabel id=\"demo-simple-select-label\">Wallet Type</InputLabel>\n                <Select\n                    labelId=\"demo-simple-select-label\"\n                    id=\"demo-simple-select\"\n                    value={walletType}\n                    onChange={(ev) => setWalletType(ev.target.value)}\n                >\n                {\n                    wallet_data && (\n                        wallet_data.walletTypes.map(item => <MenuItem value={item.name}>{item.name}</MenuItem>)\n                    )\n                }\n                </Select>\n            </FormControl>\n            <TextField \n                id=\"outlined-basic\"  \n                variant=\"outlined\" \n                value={name} \n                onChange={ev => setName(ev.target.value)}\n                label=\"Name\"\n                autocomplete=\"off\"\n            />\n            <TextField \n                id=\"outlined-basic\" \n                variant=\"outlined\" \n                value={address} \n                onChange={ev => setAddress(ev.target.value)}\n                label=\"Address\"\n                autocomplete=\"off\"\n            />\n            <Button variant=\"contained\" color=\"primary\" onClick={addWallet}>Add wallet</Button>\n        </div>\n    )\n}","import React, {useState, useEffect} from 'react'\nimport { makeStyles } from '@material-ui/core/styles'\nimport TextField from '@material-ui/core/TextField'\nimport Button from '@material-ui/core/Button'\nimport Select from '@material-ui/core/Select'\nimport MenuItem from '@material-ui/core/MenuItem'\nimport InputLabel from '@material-ui/core/InputLabel'\nimport FormControl from '@material-ui/core/FormControl'\nimport { useQuery, useMutation, gql } from '@apollo/client'\n\nconst MY_WALLETS = gql`\nquery{\n    me{\n      wallets{\n        name\n      }\n    }\n  }\n`\nconst ADD_TOKEN = gql`\nmutation addToken($walletName: String!, $token: String!){\n    addToken(walletName: $walletName, token: $token){\n        token\n  }\n}\n`\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        display: 'flex',\n        flexFlow: 'column',\n        '& > *': {\n            margin: theme.spacing(1),\n            width: '25ch',\n      },\n    },\n    formControl: {\n        margin: theme.spacing(1),\n        minWidth: 120,\n      },\n  }));\n\nexport default function AddToken(props){\n    const [token, setName] = useState('')\n    const [walletName, setWalletName] = useState('')\n    const classes = useStyles()\n    const [add_token, { data: mutation_data }] = useMutation(ADD_TOKEN)\n    const { loading, error, data } = useQuery(MY_WALLETS)\n\n    async function addToken(){\n        await add_token({\n                variables: {\n                    walletName: walletName, \n                    token: token,\n            }\n        })\n        console.log('this')\n    }\n\n    if(props.invisible) return <></>\n\n    return(\n        <div className={classes.root}>\n            <FormControl className={classes.formControl}>\n                <InputLabel id=\"demo-simple-select-label\">Wallet</InputLabel>\n                <Select\n                    labelId=\"demo-simple-select-label\"\n                    id=\"demo-simple-select\"\n                    value={walletName}\n                    onChange={(ev) => setWalletName(ev.target.value)}\n                >\n                {\n                    data && (\n                        data.me.wallets.map(item => <MenuItem value={item.name}>{item.name}</MenuItem>)\n                    )\n                }\n                </Select>\n            </FormControl>\n            <TextField \n                id=\"outlined-basic\"  \n                variant=\"outlined\" \n                value={token} \n                onChange={ev => setName(ev.target.value)}\n                label=\"Token\"\n                autocomplete=\"off\"\n            />\n            <Button variant=\"contained\" color=\"primary\" onClick={addToken}>Add token</Button>\n        </div>\n    )\n}","import React, { useState, useEffect } from 'react'\nimport { useQuery, gql } from '@apollo/client'\n\nconst MY_BALANCE = gql`\nquery{\n    me{\n        lastUpdate\n    }\n  }\n`\n\nexport default function UserHeartbeat(props) {\n    const [alive, setAlive] = useState(true)\n    const { loading, error, data } = useQuery(MY_BALANCE, {\n        pollInterval: 50000,\n    })\n\n    useEffect(()=>{\n        if(data && 'me' in data && 'lastUpdate' in data.me){\n            const last_update = new Date(data.me.lastUpdate * 1000)\n            if(((new Date()) - last_update) > 1200000){\n                setAlive(false)\n            }\n            else if(!alive && ((new Date()) - last_update) < 1200000){\n                setAlive(true)\n            }\n        }\n    }, [data])\n\n    if (loading) return <p>Loading...</p>\n    if (error) return <p>Error :(</p>\n\n    return (\n        <svg width=\"50\" height=\"50\" viewBox=\"0 0 200 200\">\n            <g transform=\"translate(100 100)\">\n                <path transform=\"translate(-50 -50)\" fill={ alive? \"tomato\" : \"gray\"} d=\"M92.71,7.27L92.71,7.27c-9.71-9.69-25.46-9.69-35.18,0L50,14.79l-7.54-7.52C32.75-2.42,17-2.42,7.29,7.27v0 c-9.71,9.69-9.71,25.41,0,35.1L50,85l42.71-42.63C102.43,32.68,102.43,16.96,92.71,7.27z\"></path>\n                { alive && <animateTransform\n                    attributeName=\"transform\"\n                    type=\"scale\"\n                    values=\"1; 1.5; 1.25; 1.5; 1.5; 1; 1; 1; 1; 1;\"\n                    dur=\"2s\"\n                    repeatCount=\"indefinite\"\n                    additive=\"sum\">\n                </animateTransform>}\n            </g>\n        </svg>\n    )\n}","import React from 'react'\nimport { createUseStyles } from 'react-jss'\nimport PropTypes from 'prop-types'\nimport 'fonts/cryptofont.css'\n\nconst useStyles = createUseStyles({\n    list: {\n        display: 'flex',\n        flexFlow: 'column',\n        width: '100%',\n        height: 'fit-content'\n    },\n    row_root: {\n        display: 'grid',\n        gridTemplateColumns:    '1fr 2fr 1fr',\n        gridTemplateRows:       '1fr 1fr',\n        gridTemplateAreas: `\n        'icon table percent'\n        'icon  table percent'\n        `\n       ,\n        height: 'fit-content',\n        marginTop: '.5rem',\n        // background: 'rgba(50,100,50,.5',\n        border: '1px solid rgba(100,100,200,.5)',\n        boxSizing: 'border-box',\n        padding: '.5rem',\n        backgroundColor: 'rgba(100,100,200,.4)',\n    },\n    \n    row_top: {\n        display: 'flex',\n    },\n    row_image: {\n        width: '2.5rem',\n        height: '2rem',\n        background: 'blue',\n        fontSize: '1rem',\n        display: 'flex',\n        justifyContent: 'center',\n        alignItems: 'center'\n    },\n    card_title: {\n        gridArea: 'name',\n        fontSize: '1rem',\n        justifySelf: 'start'\n    },\n    icon:{\n        display: 'flex',\n        justifyContent: 'space-evenly',\n        alignItems: 'center',\n        gridArea: 'icon',\n    },\n    percentage: {\n        gridArea: 'percent',\n        fontWeight: 700,\n        fontSize: '2rem'\n    },\n    table:{\n        gridArea: 'table',\n        display: 'grid',\n        gridTemplateColumns:    '1fr 1fr 1fr',\n        gridTemplateRows:       '1fr 1fr',\n        fontSize: '1rem',\n        alignmContent: 'center',\n        alignItems: 'center'\n    },\n    divider: {\n        gridArea: 'line',\n        background: 'blue'\n    }\n})\n\n\n\nexport default function BalanceList(props) {\n    const classes = useStyles()\n\n    const red_or_green = val => val > 0 ? 'rgba(100, 200, 100, .8)' : 'rgba(200, 100, 100, .8)' \n\n    const Row = props => {\n        return (\n            props && <div>\n                <div className={classes.row_root}>\n                    <div className={classes.icon}>\n                        <i className={`cf cf-${props.currency.toLowerCase()}`}/>\n                        <div className={classes.card_title}>{props.currency}</div>    \n                    </div>\n                    \n                    <span className={classes.percentage}>{`${Math.round(props.portfolio_percentage, 2)}%`}</span>\n                    <div className={classes.table}>\n                        <div>1h</div>\n                        <div>24h</div>\n                        <div>7d</div>\n                        <div style={{color: red_or_green(props.priceChangePercentage1hInCurrency)}}>{`${Math.round(props.priceChangePercentage1hInCurrency, 2)}%`}</div>\n                        <div style={{color: red_or_green(props.priceChangePercentage24hInCurrency)}}>{`${Math.round(props.priceChangePercentage24hInCurrency, 2)}%`}</div>\n                        <div style={{color: red_or_green(props.priceChangePercentage7dInCurrency)}}>{`${Math.round(props.priceChangePercentage7dInCurrency, 2)}%`}</div>\n                    </div>\n                    <div className={classes.divider} />\n                </div>\n            </div>\n        )\n    }\n\n    return (\n        <div>\n            {props.data && props.data.map(currency => <Row {...currency} />)}\n        </div>\n    )\n}\n\nBalanceList.propTypes = {\n    data: PropTypes.arrayOf(\n        PropTypes.shape({\n            portfolio_percentage: PropTypes.number,\n            value_usd: PropTypes.number,\n            // value_btc: PropTypes.number,\n            symbol: PropTypes.string,\n\n        })\n    )\n}","import React, {useState, useEffect} from 'react'\nimport { makeStyles } from '@material-ui/core/styles'\nimport { HorizontalBar } from 'react-chartjs-2'\nimport UserHeartbeat from 'components/user-heartbeat'\nimport BalanceList from 'components/balance-list'\nimport {colors} from 'components/random-color'\nimport { useQuery, gql } from '@apollo/client'\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        display: 'flex',\n        flexFlow: 'column',\n        '& > *': {\n            margin: theme.spacing(1),\n            width: '25ch',\n      },\n    },\n    formControl: {\n        margin: theme.spacing(1),\n        minWidth: 120,\n      },\n  }));\n\nconst MY_BALANCE = gql`\nquery{\n    me{\n      portfolioValue\n      portfolio{\n        currency\n        total\n        usd\n        coinId\n        priceChangePercentage1hInCurrency\n        priceChangePercentage24hInCurrency\n        priceChangePercentage7dInCurrency\n      }\n    }\n  }\n`\n\nexport default function Balance(props){\n    const [balances, setBalances] = useState()\n    const [usd, setUsd] = useState()\n    const [listData, setlistData] = useState()\n    const classes = useStyles()\n    const { loading, error, data } = useQuery(MY_BALANCE, {\n        pollInterval: 10000,\n      })\n\n    useEffect(() => {\n        if (data){\n            const above_1 = Object.values(data.me.portfolio).filter(currency => parseFloat(currency.usd) > 1)\n            above_1.sort((a,b) => (a['usd'] > b['usd']) ? 1 : ((b['usd'] > a['usd']) ? -1 : 0)).reverse()\n            setlistData(above_1.map(currency =>  {\n              return {\n                portfolio_percentage: currency['usd']/data.me.portfolioValue * 100,\n                ...currency\n              }\n            }))\n            setUsd(data.me.portfolioValue)\n        }\n    }, [data])\n\n    if (loading) return <p>Loading...</p>\n    if (error) return <p>Error :(</p>\n\n    return(\n        <div className={classes.root}>\n            <UserHeartbeat />\n            <div>{usd}</div>\n            <BalanceList data={listData} />\n        </div>\n    )\n}","import React from 'react'\nimport { createUseStyles } from 'react-jss'\nimport { useQuery, gql } from '@apollo/client'\n\nconst classes = createUseStyles({\n    coin_root: {\n\n    }\n})\n\nexport default function Coin(props){\n    const { loading, error, data } = useQuery(gql`\n    query{    \n        me{\n            portfolioValue\n            portfolio(coin_id: \"${props.coinId}\"){\n                currency\n                total\n                usd\n                coinId\n                priceChangePercentage1hInCurrency\n                priceChangePercentage24hInCurrency\n                priceChangePercentage7dInCurrency\n            }\n            }\n    }\n    `)\n\n    if(loading) return <div>Loading...</div>\n    if(error)   return <div>Error</div>\n    \n    return(\n        <div className={classes.coin_root}>\n            <div>{data}</div>\n        </div>\n    )\n}","// import * as serviceWorker from 'serviceWorker';\n\n\n\nexport function notification() {\n\n}\n\nexport function displayNotification() {\n  if (Notification.permission == 'granted') {\n    navigator.serviceWorker.getRegistration().then(function (reg) {\n      var options = {\n        body: 'Here is a notification body!',\n        icon: 'images/example.png',\n        vibrate: [100, 50, 100],\n        data: {\n          dateOfArrival: Date.now(),\n          primaryKey: 1\n        }\n      };\n      reg.showNotification('Hello world!', options);\n\n      reg.pushManager.getSubscription().then(function (sub) {\n        if (sub === null) {\n          // Update UI to ask user to register for Push\n          console.log('Not subscribed to push service!');\n          subscribeUser()\n        } else {\n          // We have a subscription, update the database\n          console.log('Subscription object: ', JSON.stringify(sub));\n        }\n      });\n\n    });\n  }\n}\n\nfunction urlBase64ToUint8Array(base64String) {\n  const padding = '='.repeat((4 - base64String.length % 4) % 4);\n  const base64 = (base64String + padding)\n    .replace(/\\-/g, '+')\n    .replace(/_/g, '/')\n    ;\n  let rawData\n\n  rawData = atob(base64);\n  return Uint8Array.from([...rawData].map((char) => char.charCodeAt(0)));\n}\n\nconst applicationServerKey = urlBase64ToUint8Array('BOnPOdBMs6jPhfJ_F9EpeyiPOc2dX4niC6-V_zSZcRSn2TwRkI4i_TeLqxiSTSiPgm89355SeAZFZnJp9QMfWqY')\n\nexport async function subscribeUser(func) {\n  Notification.requestPermission(status => {\n    console.log('Notification permission status:', status);\n  });\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(function (reg) {\n\n      reg.pushManager.subscribe({\n        userVisibleOnly: true,\n        applicationServerKey: applicationServerKey\n      }).then(async function (sub) {\n        console.log('Endpoint URL: ', sub.endpoint);\n        console.log('Origin: ', new URL(sub.endpoint).origin)\n        console.log(sub.toJSON())\n        func(sub.toJSON())\n        try {\n          await reg.periodicSync.register('sub-refresh', {\n            minInterval: 10 * 1000,\n          })\n        } catch {\n          console.log('Periodic Sync could not be registered!');\n        }\n        return sub\n      }).catch(function (e) {\n        if (Notification.permission === 'denied') {\n          console.warn('Permission for notifications was denied');\n        } else {\n          console.error('Unable to subscribe to push', e);\n        }\n      });\n    })\n\n  }\n}","import React, {useState, useEffect} from 'react'\nimport { makeStyles } from '@material-ui/core/styles'\nimport TextField from '@material-ui/core/TextField'\nimport Button from '@material-ui/core/Button'\nimport {subscribeUser} from 'components/push-notification'\nimport {updateSubscription} from 'services'\nimport { useMutation, gql } from '@apollo/client'\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        display: 'flex',\n        flexFlow: 'column',\n        '& > *': {\n            margin: theme.spacing(1),\n            width: '25ch',\n      },\n    },\n    formControl: {\n        margin: theme.spacing(1),\n        minWidth: 120,\n      },\n  }));\n\nconst ADD_SUBSCRIPTION = gql`\nmutation addSubscription($endpoint: String!, $p256dh: String!, $auth: String!){\n  addSubscription(endpoint: $endpoint, p256dh: $p256dh, auth: $auth){\n    stuff\n  }\n}\n`\n\nexport default function Settings(props){\n    const [add_subscription, { data }] = useMutation(ADD_SUBSCRIPTION)\n    const classes = useStyles()\n\n    if(props.invisible) return <></>\n\n    async function addSubscriptionInfo(){\n        await subscribeUser( (sub) => add_subscription({\n                variables: {\n                endpoint: sub.endpoint, \n                p256dh: sub.keys.p256dh,\n                auth: sub.keys.auth\n            }\n        }))\n        console.log('this')\n    }\n\n    return(\n        <div className={classes.root}>\n            <Button variant=\"contained\" color=\"primary\" onClick={addSubscriptionInfo}>Subscribe Push Notification</Button>\n        </div>\n    )\n}","import React from 'react';\nimport clsx from 'clsx';\nimport { makeStyles } from '@material-ui/core/styles';\nimport SwipeableDrawer from '@material-ui/core/SwipeableDrawer';\nimport IconButton from '@material-ui/core/IconButton';\nimport Menu from '@material-ui/icons/Menu';\nimport List from '@material-ui/core/List';\nimport Divider from '@material-ui/core/Divider';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport InboxIcon from '@material-ui/icons/MoveToInbox';\nimport MailIcon from '@material-ui/icons/Mail';\n\nconst useStyles = makeStyles({\n  list: {\n    width: 250,\n  },\n  fullList: {\n    width: 'auto',\n  },\n  menuButton: {\n      position: 'absolute',\n      left: '2rem',\n      top: '2rem'\n  }\n});\n\nexport default function Drawer(props) {\n  const classes = useStyles();\n  const [state, setState] = React.useState(false);\n\n  const toggleDrawer = (open) => (event) => {\n    if (event && event.type === 'keydown' && (event.key === 'Tab' || event.key === 'Shift')) {\n      return;\n    }\n\n    setState(open);\n  };\n\n  const list = (anchor) => (\n    <div\n      className={clsx(classes.list, {\n        [classes.fullList]: anchor === 'top' || anchor === 'bottom',\n      })}\n      role=\"presentation\"\n      onClick={toggleDrawer(false)}\n      onKeyDown={toggleDrawer(false)}\n    >\n      <List>\n        {props.views? props.views.map((view, index) => (\n          <ListItem button key={view.key} onClick={() => props.setView(view.text)}>\n            {/* <ListItemIcon>{index % 2 === 0 ? <InboxIcon /> : <MailIcon />}</ListItemIcon> */}\n            <ListItemText primary={view.text} />\n          </ListItem>\n        ))\n        :null}\n        <ListItem button key=\"logout\" onClick={() => props.logout()}>\n            <ListItemText primary=\"Logout\" />\n          </ListItem>\n      </List>\n    </div>\n  );\n\n  return (\n    <div>\n        <div className={classes.menuButton}>\n            <IconButton  color=\"primary\" aria-label=\"upload picture\" component=\"span\" onClick={toggleDrawer(true)}>\n            <Menu />\n            </IconButton>\n        </div>\n        <SwipeableDrawer\n        anchor={'left'}\n        open={state}\n        onClose={toggleDrawer(false)}\n        onOpen={toggleDrawer(true)}\n        >\n        {list('left')}\n        </SwipeableDrawer>\n    </div>\n  );\n}","import React, {useState} from 'react'\nimport { makeStyles } from '@material-ui/core/styles'\n\nconst styles = makeStyles((theme) => ({\n    scene: {\n        width: '210px',\n        height: '140px',\n        position: 'relative',\n        perspective: '1000px'\n    },\n    carousel:{\n        width: '100%',\n        height: '100%',\n        position: 'absolute',\n        transformStyle: 'preserve-3d',\n    },\n    carousel__cell: {\n        position: 'absolute',\n        width: '190px',\n        height: '120px',\n        left: '10px',\n        top: '10px',\n    }\n  }));\n\nexport default function Carousel(props){\n\n  const [carousel, setCarousel] = useState(props.children)\n  const [cells, setCells] = useState()\n  const [cellCount, setCellCount] = useState()\n  const [selectedIndex, setSelectedIndex] = useState(0)\n\n    return(\n        <div class={styles.carousel}>\n            <div className={styles.carousel}>\n                {\n                    carousel.map((child, index) => <div className={styles.carousel__cell} style={{ transform: `rotateY(  ${index*40}deg)` }}>{child}</div>)\n                }\n            </div>\n        </div>\n    )\n}\n\n\n\n","import React, { useState, useEffect } from 'react'\nimport logo from './logo.svg'\nimport './App.css'\nimport { ApolloClient, createHttpLink, InMemoryCache } from '@apollo/client'\nimport { onError } from \"@apollo/client/link/error\"\nimport { setContext } from '@apollo/client/link/context'\nimport { ApolloProvider } from '@apollo/client'\n// import {  } from '@apollo/link-error'\n// import { RestLink } from 'apollo-link-rest'\nimport { createMuiTheme, makeStyles, ThemeProvider } from '@material-ui/core/styles'\nimport jwt_decode from \"jwt-decode\"\n\nimport Login from 'components/Login'\nimport AddAccount from 'components/add-account'\nimport AddWallet from 'components/add-wallet'\nimport AddToken from 'components/add-token'\nimport Balance from 'components/balance'\nimport Coin from 'components/Coin'\nimport Settings from 'components/settings'\nimport Drawer from 'components/drawer'\nimport Carousel from 'views/carousel'\nimport { API_URL, refresh_token, createGQL } from 'services'\nimport jwt from 'jsonwebtoken'\n\nconst darkTheme = createMuiTheme({\n  palette: {\n    type: 'dark',\n  },\n});\n\nconst views = [\n  { key: 'Login', text: 'Login' },\n  { key: 'AddAccount', text: 'Add Account' },\n  { key: 'Add Wallet', text: 'Add Wallet' },\n  { key: 'Add Token', text: 'Add Token' },\n  { key: 'Balance', text: 'Balance' },\n  { key: 'Settings', text: 'Settings' }\n]\n\nconst logout = () => {\n  window.location.reload()\n}\n\nfunction App() {\n  const [token, setToken] = useState()\n  const [client, setClient] = useState()\n  const [item, setItem] = useState()\n  const [loggedIn, setLoggedIn] = useState(false)\n  const [view, setView] = useState('Login')\n\n  useEffect(() => {\n    if (!loggedIn && view !== 'Login') {\n      setView('Login')\n    }\n    else if (loggedIn && !client && token) {\n      setClient(createGQL(token))\n      setView('Balance')\n    }\n  }, [loggedIn, token])\n\n  const views = [\n    { key: 'Login', text: 'Login' },\n    { key: 'AddAccount', text: 'Add Account' },\n    { key: 'Add Wallet', text: 'Add Wallet' },\n    { key: 'Add Token', text: 'Add Token' },\n    { key: 'Balance', text: 'Balance' },\n    { key: 'Settings', text: 'Settings' }\n  ]\n\n  return (\n    <div className=\"App\">\n      <div className=\"App-header\">\n        <ThemeProvider theme={darkTheme}>\n          {view === 'Login' && <Login loggedIn={loggedIn} setLoggedIn={setLoggedIn} setToken={setToken} setView={setView} />}\n\n          {client && <ApolloProvider client={client}>\n            {<Drawer views={views} setView={setView} logout={logout} />}\n            {loggedIn && view === 'Balance' &&  <Balance />}\n            {loggedIn && view == 'Settings' &&  <Settings />}\n            {loggedIn && view === 'Add Account' && <AddAccount />}\n            {loggedIn && view === 'Add Wallet' && <AddWallet />}\n            {loggedIn && view === 'Add Token' && <AddToken />}\n          </ApolloProvider>}\n        </ThemeProvider>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.register();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}