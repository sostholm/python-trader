{"version":3,"sources":["logo.svg","services/index.js","components/Login/index.js","components/add-account/index.js","components/add-wallet/index.jsx","components/add-token/index.jsx","components/user-heartbeat/index.js","components/balance-list/index.js","components/balance/index.js","components/coin/index.jsx","components/push-notification/index.js","components/settings/index.jsx","components/drawer/index.js","views/carousel/index.js","App.js","serviceWorkerRegistration.js","reportWebVitals.js","index.js"],"names":["logout","window","location","reload","API_URL","Dexie","version","stores","token","useStyles","makeStyles","theme","root","display","flexFlow","margin","spacing","width","Login","props","useState","username","setUsername","password","setPassword","classes","loggedIn","login","a","console","log","fetch","method","body","JSON","stringify","then","result","json","payload","setToken","setLoggedIn","setView","className","TextField","id","variant","value","onChange","ev","target","label","type","Button","color","onClick","formControl","minWidth","WALLET_TYPES","gql","ADD_WALLET","AddWallet","name","setName","address","setAddress","walletType","setWalletType","useMutation","add_wallet","data","useQuery","wallet_data","loading","error","variables","wallet_type_id","invisible","FormControl","InputLabel","Select","labelId","walletTypes","map","item","MenuItem","autocomplete","MY_WALLETS","ADD_TOKEN","AddToken","walletName","setWalletName","add_token","me","wallets","MY_BALANCE","UserHeartbeat","alive","setAlive","pollInterval","useEffect","last_update","Date","lastUpdate","height","viewBox","transform","fill","d","attributeName","values","dur","repeatCount","additive","createUseStyles","list","row_root","gridTemplateColumns","gridTemplateRows","gridTemplateAreas","marginTop","border","boxSizing","padding","backgroundColor","row_top","row_image","background","fontSize","justifyContent","alignItems","card_title","gridArea","justifySelf","icon","percentage","fontWeight","table","alignmContent","divider","BalanceList","red_or_green","val","Row","currency","toLowerCase","Math","round","portfolio_percentage","style","priceChangePercentage1hInCurrency","priceChangePercentage24hInCurrency","priceChangePercentage7dInCurrency","Balance","usd","setUsd","listData","setlistData","above_1","Object","portfolio","filter","parseFloat","sort","b","reverse","portfolioValue","coin_root","applicationServerKey","base64String","rawData","base64","repeat","length","replace","atob","Uint8Array","from","char","charCodeAt","urlBase64ToUint8Array","subscribeUser","func","Notification","requestPermission","status","navigator","serviceWorker","ready","reg","pushManager","subscribe","userVisibleOnly","sub","endpoint","URL","origin","toJSON","periodicSync","register","minInterval","catch","e","permission","warn","ADD_SUBSCRIPTION","Settings","add_subscription","p256dh","keys","auth","fullList","menuButton","position","left","top","Drawer","anchor","React","state","setState","toggleDrawer","open","event","key","IconButton","aria-label","component","SwipeableDrawer","onClose","onOpen","clsx","role","onKeyDown","List","views","view","index","ListItem","button","text","ListItemText","primary","scene","perspective","carousel","transformStyle","carousel__cell","darkTheme","createMuiTheme","palette","App","client","setClient","httpLink","createHttpLink","uri","authLink","setContext","_","headers","authorization","errorLink","onError","graphQLErrors","networkError","err","extensions","code","alert","message","bodyText","ApolloClient","link","concat","cache","InMemoryCache","createGQL","ThemeProvider","isLocalhost","Boolean","hostname","match","registerValidSW","swUrl","config","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","process","href","addEventListener","response","contentType","get","indexOf","unregister","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"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","file":"static/js/main.f66ea7d3.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import { ApolloClient, createHttpLink, InMemoryCache } from '@apollo/client'\r\nimport { onError } from \"@apollo/client/link/error\"\r\nimport { setContext } from '@apollo/client/link/context'\r\n\r\nconst logout = () => {\r\n  window.location.reload()\r\n}\r\n\r\nlet url\r\nif (process.env.NODE_ENV === 'development') url = 'http://localhost:8000'\r\nelse url = 'https://server:8000'\r\n\r\nexport const API_URL = url\r\n\r\n// const db = new Dexie('python-trader');\r\n// db.version(1).stores({\r\n//   token: \"++id,token\"\r\n// });\r\n\r\nexport const fetcher = async (gql, token) => {\r\n  const response = await fetch(API_URL + '/graphql', {\r\n    method: 'POST',\r\n    cache: 'no-cache',\r\n    headers: {\r\n      'Content-Type': 'application/json',\r\n      'Authorization': `Bearer ${token}`,\r\n    },\r\n    body: JSON.stringify({\"query\": gql})\r\n  })\r\n\r\n  return response.json()\r\n}\r\n\r\nexport const update_token = (token) => `\r\nmutation{\r\n  updateToken(token: \"${token}\"){\r\n    token\r\n  }\r\n}\r\n`\r\n\r\nexport const refresh_token = async (old) => {\r\n  const result = await fetcher(update_token(old), old)\r\n  return result.data.updateToken.token\r\n}\r\n\r\nexport function createGQL(token) {\r\n  const httpLink = createHttpLink({\r\n    uri: API_URL + '/graphql',\r\n  });\r\n\r\n  const authLink = setContext((_, { headers }) => {\r\n\r\n    return {\r\n      headers: {\r\n        ...headers,\r\n        authorization: token ? `Bearer ${token}` : \"\",\r\n      }\r\n    }\r\n  });\r\n\r\n  const errorLink = onError(({ graphQLErrors, networkError }) => {\r\n    if (graphQLErrors) {\r\n      for (let err of graphQLErrors) {\r\n        if(err.extensions && err.extensions.code == 'UNAUTHENTICATED') logout()\r\n        else{\r\n          alert(err.message)\r\n          console.log(err)\r\n        }\r\n      }\r\n    }\r\n    if (networkError) {\r\n      if (networkError.bodyText === 'Signature has expired') logout()\r\n      else console.log(`[Network error]: ${networkError}`)\r\n    }\r\n  })\r\n\r\n  return new ApolloClient({\r\n    link: authLink.concat(errorLink).concat(httpLink),\r\n    cache: new InMemoryCache()\r\n  });\r\n}\r\n\r\nexport const user_balance = `\r\n{\r\n    binance{\r\n        balance{\r\n        currency\r\n        total\r\n        usd\r\n        }\r\n    }\r\n    cryptoCdc{\r\n        balance{\r\n        currency\r\n        total\r\n        usd\r\n        }\r\n    }\r\n    gateio{\r\n        balance{\r\n        currency\r\n        total\r\n        usd\r\n        }\r\n    }\r\n}\r\n`\r\nexport const my_balance = () => `\r\nquery{\r\n  me{\r\n    portfolio{\r\n      currency\r\n      total\r\n      usd\r\n    }\r\n  }\r\n}\r\n\r\n`\r\n\r\nexport const get_exchanges = () => `\r\nquery{\r\n    exchanges{\r\n        id\r\n        name\r\n    }\r\n}\r\n`\r\n\r\nexport const get_wallet_types = () => `\r\nquery{\r\n  walletTypes{\r\n    id\r\n    name\r\n  }\r\n}\r\n`\r\n\r\nexport const add_account = (api_key, api_secret, exchange_id) => `\r\nmutation{\r\n    addAccount(apiKey:\"${api_key}\", secret: \"${api_secret}\", exchangeId: \"${exchange_id}\"){\r\n      account{\r\n        apiKey\r\n      }\r\n    }\r\n  }\r\n`\r\n\r\nexport const add_wallet = (name, address, wallet_type_id) => `\r\nmutation{\r\n  addWallet(name: \"${name}\", address: \"${address}\", walletType: \"${wallet_type_id}\"){\r\n    wallet{\r\n      name\r\n    }\r\n  }\r\n}\r\n`\r\nexport const add_token = (token, wallet_name) => `\r\nmutation{\r\n  addToken(token:\"${token}\", walletName: \"${wallet_name}\"){\r\n    token\r\n  }\r\n}\r\n`\r\n\r\nexport const get_accounts = () => `\r\nquery{\r\n    accounts{\r\n          exchange{\r\n        name\r\n      }\r\n    }\r\n  }\r\n`\r\n\r\nexport const get_wallets = () => `\r\nquery{\r\n  wallets{\r\n    name\r\n  }\r\n}\r\n`\r\n\r\nexport const get_exchange_balance = (exchange) => {\r\n  const exchange_query = (ex) => `\r\n  ${ex}{\r\n      balance{\r\n        currency\r\n        available\r\n        usd\r\n      }\r\n    } \r\n  `\r\n  if (!Array.isArray(exchange)) {\r\n    exchange = [exchange]\r\n  }\r\n\r\n  return 'query{' + exchange.map(ex => exchange_query(ex.exchange.name)).join('\\n') + '}'\r\n}\r\n\r\nexport const updateSubscription = (subinfo) => {\r\n  console.log(subinfo)\r\n  return `\r\nmutation{\r\n  addSubscription(endpoint: \"${subinfo.endpoint}\", expirationTime: \"${subinfo.expirationTime}\", p256dh: \"${subinfo.keys.p256dh}\", auth: \"${subinfo.keys.auth}\"){\r\n    stuff\r\n  }\r\n}\r\n`\r\n}\r\n","import React, { useState } from 'react'\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Button from '@material-ui/core/Button';\r\nimport Dexie from 'dexie'\r\n\r\nimport { API_URL } from 'services'\r\n\r\nconst db = new Dexie('python-trader');\r\ndb.version(1).stores({\r\n  token: \"++id,token\"\r\n});\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        display: 'flex',\r\n        flexFlow: 'column',\r\n        '& > *': {\r\n            margin: theme.spacing(1),\r\n            width: '25ch',\r\n        },\r\n    },\r\n}));\r\n\r\nexport default function Login(props) {\r\n    const [username, setUsername] = useState('')\r\n    const [password, setPassword] = useState('')\r\n    const classes = useStyles();\r\n\r\n    if (props.loggedIn) return <></>\r\n\r\n    const login = async () => {\r\n        console.log(\"Sending websocket data\")\r\n        const payload = await fetch( API_URL + '/login', { method: 'POST', body: JSON.stringify({ 'username': username, 'password': password }) }).then(result => result.json())\r\n        props.setToken(payload.token)\r\n        // await props.getQuery({'username': username, 'password': password})\r\n        props.setLoggedIn(true, props.setView('Balance'))\r\n    }\r\n\r\n    return (\r\n        <div className={classes.root}>\r\n            <TextField\r\n                id=\"outlined-basic\"\r\n                variant=\"outlined\"\r\n                value={username}\r\n                onChange={ev => setUsername(ev.target.value)}\r\n                label=\"Username\"\r\n            />\r\n            <TextField\r\n                id=\"outlined-basic\"\r\n                variant=\"outlined\"\r\n                value={password}\r\n                onChange={ev => setPassword(ev.target.value)}\r\n                label=\"Password\"\r\n                type=\"password\"\r\n            />\r\n            <Button variant=\"contained\" color=\"primary\" onClick={login}>Login</Button>\r\n        </div>\r\n    )\r\n}","import React, {useState, useEffect} from 'react'\r\nimport { makeStyles } from '@material-ui/core/styles'\r\nimport TextField from '@material-ui/core/TextField'\r\nimport Button from '@material-ui/core/Button'\r\nimport Select from '@material-ui/core/Select'\r\nimport MenuItem from '@material-ui/core/MenuItem'\r\nimport InputLabel from '@material-ui/core/InputLabel'\r\nimport FormControl from '@material-ui/core/FormControl'\r\nimport {get_exchanges, add_account} from 'services'\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        display: 'flex',\r\n        flexFlow: 'column',\r\n        '& > *': {\r\n            margin: theme.spacing(1),\r\n            width: '25ch',\r\n      },\r\n    },\r\n    formControl: {\r\n        margin: theme.spacing(1),\r\n        minWidth: 120,\r\n      },\r\n  }));\r\n\r\nexport default function AddAccount(props){\r\n    const [apiKey, setApiKey] = useState('')\r\n    const [apiSecret, setApiSecret] = useState('')\r\n    const [exchange, setExchange] = useState()\r\n    const [menuItems, setMenuItems] = useState()\r\n    const classes = useStyles()\r\n\r\n    async function updateExchanges(){\r\n        const result = await props.getQuery(get_exchanges())\r\n        console.log(result)\r\n        console.log('im triggered')\r\n        setMenuItems(result.payload.exchanges)\r\n    }\r\n\r\n    async function addAccount(){\r\n        await props.getQuery(add_account(apiKey, apiSecret, exchange))\r\n        console.log('this')\r\n    }\r\n\r\n    useEffect(() => {\r\n        console.log('im triggered')\r\n        updateExchanges()\r\n    }, [])\r\n\r\n    if(props.invisible) return <></>\r\n\r\n    return(\r\n        <div className={classes.root}>\r\n            <FormControl className={classes.formControl}>\r\n                <InputLabel id=\"demo-simple-select-label\">Exchange</InputLabel>\r\n                <Select\r\n                labelId=\"demo-simple-select-label\"\r\n                id=\"demo-simple-select\"\r\n                value={exchange}\r\n                onChange={(ev) => setExchange(ev.target.value)}\r\n                >\r\n                {\r\n                    menuItems && (\r\n                        menuItems.map(item => <MenuItem value={item.id}>{item.name}</MenuItem>)\r\n                    )\r\n                }\r\n                </Select>\r\n            </FormControl>\r\n            <TextField \r\n                id=\"outlined-basic\"  \r\n                variant=\"outlined\" \r\n                value={apiKey} \r\n                onChange={ev => setApiKey(ev.target.value)}\r\n                label=\"Api Key\"\r\n                autocomplete=\"off\"\r\n            />\r\n            <TextField \r\n                id=\"outlined-basic\" \r\n                variant=\"outlined\" \r\n                value={apiSecret} \r\n                onChange={ev => setApiSecret(ev.target.value)}\r\n                label=\"Api Secret\"\r\n                type=\"password\"\r\n                autocomplete=\"off\"\r\n            />\r\n            <Button variant=\"contained\" color=\"primary\" onClick={addAccount}>Add Account</Button>\r\n        </div>\r\n    )\r\n}","import React, {useState, useEffect} from 'react'\r\nimport { makeStyles } from '@material-ui/core/styles'\r\nimport TextField from '@material-ui/core/TextField'\r\nimport Button from '@material-ui/core/Button'\r\nimport Select from '@material-ui/core/Select'\r\nimport MenuItem from '@material-ui/core/MenuItem'\r\nimport InputLabel from '@material-ui/core/InputLabel'\r\nimport FormControl from '@material-ui/core/FormControl'\r\nimport { useQuery, useMutation, gql } from '@apollo/client'\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        display: 'flex',\r\n        flexFlow: 'column',\r\n        '& > *': {\r\n            margin: theme.spacing(1),\r\n            width: '25ch',\r\n      },\r\n    },\r\n    formControl: {\r\n        margin: theme.spacing(1),\r\n        minWidth: 120,\r\n      },\r\n  }));\r\n\r\nconst WALLET_TYPES = gql`\r\nquery{\r\n    walletTypes{\r\n      id\r\n      name\r\n    }\r\n}\r\n`\r\n\r\nconst ADD_WALLET = gql`\r\nmutation addWallet($name: String!, $address: String!, $wallet_type_id: String!){\r\n    addWallet(name: $name, address: $address, wallet_type_id: $wallet_type_id){\r\n        wallet{\r\n            name\r\n        }\r\n    }\r\n}\r\n`\r\n\r\nexport default function AddWallet(props){\r\n    const [name, setName] = useState('')\r\n    const [address, setAddress] = useState('')\r\n    const [walletType, setWalletType] = useState()\r\n    const [menuItems, setMenuItems] = useState()\r\n    const classes = useStyles()\r\n    const [add_wallet, { data }] = useMutation(ADD_WALLET)\r\n    const { loading, error, data: wallet_data } = useQuery(WALLET_TYPES)\r\n\r\n    async function addWallet(){\r\n        await add_wallet({\r\n                variables: {\r\n                    name: name, \r\n                    address: address,\r\n                    wallet_type_id: walletType\r\n            }\r\n        })\r\n    }\r\n\r\n    if(props.invisible) return <></>\r\n\r\n    return(\r\n        <div className={classes.root}>\r\n            <FormControl className={classes.formControl}>\r\n                <InputLabel id=\"demo-simple-select-label\">Wallet Type</InputLabel>\r\n                <Select\r\n                    labelId=\"demo-simple-select-label\"\r\n                    id=\"demo-simple-select\"\r\n                    value={walletType}\r\n                    onChange={(ev) => setWalletType(ev.target.value)}\r\n                >\r\n                {\r\n                    wallet_data && (\r\n                        wallet_data.walletTypes.map(item => <MenuItem value={item.name}>{item.name}</MenuItem>)\r\n                    )\r\n                }\r\n                </Select>\r\n            </FormControl>\r\n            <TextField \r\n                id=\"outlined-basic\"  \r\n                variant=\"outlined\" \r\n                value={name} \r\n                onChange={ev => setName(ev.target.value)}\r\n                label=\"Name\"\r\n                autocomplete=\"off\"\r\n            />\r\n            <TextField \r\n                id=\"outlined-basic\" \r\n                variant=\"outlined\" \r\n                value={address} \r\n                onChange={ev => setAddress(ev.target.value)}\r\n                label=\"Address\"\r\n                autocomplete=\"off\"\r\n            />\r\n            <Button variant=\"contained\" color=\"primary\" onClick={addWallet}>Add wallet</Button>\r\n        </div>\r\n    )\r\n}","import React, {useState, useEffect} from 'react'\r\nimport { makeStyles } from '@material-ui/core/styles'\r\nimport TextField from '@material-ui/core/TextField'\r\nimport Button from '@material-ui/core/Button'\r\nimport Select from '@material-ui/core/Select'\r\nimport MenuItem from '@material-ui/core/MenuItem'\r\nimport InputLabel from '@material-ui/core/InputLabel'\r\nimport FormControl from '@material-ui/core/FormControl'\r\nimport { useQuery, useMutation, gql } from '@apollo/client'\r\n\r\nconst MY_WALLETS = gql`\r\nquery{\r\n    me{\r\n      wallets{\r\n        name\r\n      }\r\n    }\r\n  }\r\n`\r\nconst ADD_TOKEN = gql`\r\nmutation addToken($walletName: String!, $token: String!){\r\n    addToken(walletName: $walletName, token: $token){\r\n        token\r\n  }\r\n}\r\n`\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        display: 'flex',\r\n        flexFlow: 'column',\r\n        '& > *': {\r\n            margin: theme.spacing(1),\r\n            width: '25ch',\r\n      },\r\n    },\r\n    formControl: {\r\n        margin: theme.spacing(1),\r\n        minWidth: 120,\r\n      },\r\n  }));\r\n\r\nexport default function AddToken(props){\r\n    const [token, setName] = useState('')\r\n    const [walletName, setWalletName] = useState('')\r\n    const classes = useStyles()\r\n    const [add_token, { data: mutation_data }] = useMutation(ADD_TOKEN)\r\n    const { loading, error, data } = useQuery(MY_WALLETS)\r\n\r\n    async function addToken(){\r\n        await add_token({\r\n                variables: {\r\n                    walletName: walletName, \r\n                    token: token,\r\n            }\r\n        })\r\n        console.log('this')\r\n    }\r\n\r\n    if(props.invisible) return <></>\r\n\r\n    return(\r\n        <div className={classes.root}>\r\n            <FormControl className={classes.formControl}>\r\n                <InputLabel id=\"demo-simple-select-label\">Wallet</InputLabel>\r\n                <Select\r\n                    labelId=\"demo-simple-select-label\"\r\n                    id=\"demo-simple-select\"\r\n                    value={walletName}\r\n                    onChange={(ev) => setWalletName(ev.target.value)}\r\n                >\r\n                {\r\n                    data && (\r\n                        data.me.wallets.map(item => <MenuItem value={item.name}>{item.name}</MenuItem>)\r\n                    )\r\n                }\r\n                </Select>\r\n            </FormControl>\r\n            <TextField \r\n                id=\"outlined-basic\"  \r\n                variant=\"outlined\" \r\n                value={token} \r\n                onChange={ev => setName(ev.target.value)}\r\n                label=\"Token\"\r\n                autocomplete=\"off\"\r\n            />\r\n            <Button variant=\"contained\" color=\"primary\" onClick={addToken}>Add token</Button>\r\n        </div>\r\n    )\r\n}","import React, { useState, useEffect } from 'react'\r\nimport { useQuery, gql } from '@apollo/client'\r\n\r\nconst MY_BALANCE = gql`\r\nquery{\r\n    me{\r\n        lastUpdate\r\n    }\r\n  }\r\n`\r\n\r\nexport default function UserHeartbeat(props) {\r\n    const [alive, setAlive] = useState(true)\r\n    const { loading, error, data } = useQuery(MY_BALANCE, {\r\n        pollInterval: 50000,\r\n    })\r\n\r\n    useEffect(()=>{\r\n        if(data && 'me' in data && 'lastUpdate' in data.me){\r\n            const last_update = new Date(data.me.lastUpdate * 1000)\r\n            if(((new Date()) - last_update) > 1200000){\r\n                setAlive(false)\r\n            }\r\n            else if(!alive && ((new Date()) - last_update) < 1200000){\r\n                setAlive(true)\r\n            }\r\n        }\r\n    }, [data])\r\n\r\n    if (loading) return <p>Loading...</p>\r\n    if (error) return <p>Error :(</p>\r\n\r\n    return (\r\n        <svg width=\"50\" height=\"50\" viewBox=\"0 0 200 200\">\r\n            <g transform=\"translate(100 100)\">\r\n                <path transform=\"translate(-50 -50)\" fill={ alive? \"tomato\" : \"gray\"} d=\"M92.71,7.27L92.71,7.27c-9.71-9.69-25.46-9.69-35.18,0L50,14.79l-7.54-7.52C32.75-2.42,17-2.42,7.29,7.27v0 c-9.71,9.69-9.71,25.41,0,35.1L50,85l42.71-42.63C102.43,32.68,102.43,16.96,92.71,7.27z\"></path>\r\n                { alive && <animateTransform\r\n                    attributeName=\"transform\"\r\n                    type=\"scale\"\r\n                    values=\"1; 1.5; 1.25; 1.5; 1.5; 1; 1; 1; 1; 1;\"\r\n                    dur=\"2s\"\r\n                    repeatCount=\"indefinite\"\r\n                    additive=\"sum\">\r\n                </animateTransform>}\r\n            </g>\r\n        </svg>\r\n    )\r\n}","import React from 'react'\r\nimport { createUseStyles } from 'react-jss'\r\nimport PropTypes from 'prop-types'\r\nimport 'fonts/cryptofont.css'\r\n\r\nconst useStyles = createUseStyles({\r\n    list: {\r\n        display: 'flex',\r\n        flexFlow: 'column',\r\n        width: '100%',\r\n        height: 'fit-content'\r\n    },\r\n    row_root: {\r\n        display: 'grid',\r\n        gridTemplateColumns:    '1fr 2fr 1fr',\r\n        gridTemplateRows:       '1fr 1fr',\r\n        gridTemplateAreas: `\r\n        'icon table percent'\r\n        'icon  table percent'\r\n        `\r\n       ,\r\n        height: 'fit-content',\r\n        marginTop: '.5rem',\r\n        // background: 'rgba(50,100,50,.5',\r\n        border: '1px solid rgba(100,100,200,.5)',\r\n        boxSizing: 'border-box',\r\n        padding: '.5rem',\r\n        backgroundColor: 'rgba(100,100,200,.4)',\r\n    },\r\n    \r\n    row_top: {\r\n        display: 'flex',\r\n    },\r\n    row_image: {\r\n        width: '2.5rem',\r\n        height: '2rem',\r\n        background: 'blue',\r\n        fontSize: '1rem',\r\n        display: 'flex',\r\n        justifyContent: 'center',\r\n        alignItems: 'center'\r\n    },\r\n    card_title: {\r\n        gridArea: 'name',\r\n        fontSize: '1rem',\r\n        justifySelf: 'start'\r\n    },\r\n    icon:{\r\n        display: 'flex',\r\n        justifyContent: 'space-evenly',\r\n        alignItems: 'center',\r\n        gridArea: 'icon',\r\n    },\r\n    percentage: {\r\n        gridArea: 'percent',\r\n        fontWeight: 700,\r\n        fontSize: '2rem'\r\n    },\r\n    table:{\r\n        gridArea: 'table',\r\n        display: 'grid',\r\n        gridTemplateColumns:    '1fr 1fr 1fr',\r\n        gridTemplateRows:       '1fr 1fr',\r\n        fontSize: '1rem',\r\n        alignmContent: 'center',\r\n        alignItems: 'center'\r\n    },\r\n    divider: {\r\n        gridArea: 'line',\r\n        background: 'blue'\r\n    }\r\n})\r\n\r\n\r\n\r\nexport default function BalanceList(props) {\r\n    const classes = useStyles()\r\n\r\n    const red_or_green = val => val > 0 ? 'rgba(100, 200, 100, .8)' : 'rgba(200, 100, 100, .8)' \r\n\r\n    const Row = props => {\r\n        return (\r\n            props && <div>\r\n                <div className={classes.row_root}>\r\n                    <div className={classes.icon}>\r\n                        <i className={`cf cf-${props.currency.toLowerCase()}`}/>\r\n                        <div className={classes.card_title}>{props.currency}</div>    \r\n                    </div>\r\n                    \r\n                    <span className={classes.percentage}>{`${Math.round(props.portfolio_percentage, 2)}%`}</span>\r\n                    <div className={classes.table}>\r\n                        <div>1h</div>\r\n                        <div>24h</div>\r\n                        <div>7d</div>\r\n                        <div style={{color: red_or_green(props.priceChangePercentage1hInCurrency)}}>{`${Math.round(props.priceChangePercentage1hInCurrency, 2)}%`}</div>\r\n                        <div style={{color: red_or_green(props.priceChangePercentage24hInCurrency)}}>{`${Math.round(props.priceChangePercentage24hInCurrency, 2)}%`}</div>\r\n                        <div style={{color: red_or_green(props.priceChangePercentage7dInCurrency)}}>{`${Math.round(props.priceChangePercentage7dInCurrency, 2)}%`}</div>\r\n                    </div>\r\n                    <div className={classes.divider} />\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            {props.data && props.data.map(currency => <Row {...currency} />)}\r\n        </div>\r\n    )\r\n}\r\n\r\nBalanceList.propTypes = {\r\n    data: PropTypes.arrayOf(\r\n        PropTypes.shape({\r\n            portfolio_percentage: PropTypes.number,\r\n            value_usd: PropTypes.number,\r\n            // value_btc: PropTypes.number,\r\n            symbol: PropTypes.string,\r\n\r\n        })\r\n    )\r\n}","import React, {useState, useEffect} from 'react'\r\nimport { makeStyles } from '@material-ui/core/styles'\r\nimport { HorizontalBar } from 'react-chartjs-2'\r\nimport UserHeartbeat from 'components/user-heartbeat'\r\nimport BalanceList from 'components/balance-list'\r\nimport {colors} from 'components/random-color'\r\nimport { useQuery, gql } from '@apollo/client'\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        display: 'flex',\r\n        flexFlow: 'column',\r\n        '& > *': {\r\n            margin: theme.spacing(1),\r\n            width: '25ch',\r\n      },\r\n    },\r\n    formControl: {\r\n        margin: theme.spacing(1),\r\n        minWidth: 120,\r\n      },\r\n  }));\r\n\r\nconst MY_BALANCE = gql`\r\nquery{\r\n    me{\r\n      portfolioValue\r\n      portfolio{\r\n        currency\r\n        total\r\n        usd\r\n        coinId\r\n        priceChangePercentage1hInCurrency\r\n        priceChangePercentage24hInCurrency\r\n        priceChangePercentage7dInCurrency\r\n      }\r\n    }\r\n  }\r\n`\r\n\r\nexport default function Balance(props){\r\n    const [balances, setBalances] = useState()\r\n    const [usd, setUsd] = useState()\r\n    const [listData, setlistData] = useState()\r\n    const classes = useStyles()\r\n    const { loading, error, data } = useQuery(MY_BALANCE, {\r\n        pollInterval: 10000,\r\n      })\r\n\r\n    useEffect(() => {\r\n        if (data){\r\n            const above_1 = Object.values(data.me.portfolio).filter(currency => parseFloat(currency.usd) > 1)\r\n            above_1.sort((a,b) => (a['usd'] > b['usd']) ? 1 : ((b['usd'] > a['usd']) ? -1 : 0)).reverse()\r\n            setlistData(above_1.map(currency =>  {\r\n              return {\r\n                portfolio_percentage: currency['usd']/data.me.portfolioValue * 100,\r\n                ...currency\r\n              }\r\n            }))\r\n            setUsd(data.me.portfolioValue)\r\n        }\r\n    }, [data])\r\n\r\n    if (loading) return <p>Loading...</p>\r\n    if (error) return <p>Error :(</p>\r\n\r\n    return(\r\n        <div className={classes.root}>\r\n            <UserHeartbeat />\r\n            <div>{usd}</div>\r\n            <BalanceList data={listData} />\r\n        </div>\r\n    )\r\n}","import React from 'react'\r\nimport { createUseStyles } from 'react-jss'\r\nimport { useQuery, gql } from '@apollo/client'\r\n\r\nconst classes = createUseStyles({\r\n    coin_root: {\r\n\r\n    }\r\n})\r\n\r\nexport default function Coin(props){\r\n    const { loading, error, data } = useQuery(gql`\r\n    query{    \r\n        me{\r\n            portfolioValue\r\n            portfolio(coin_id: \"${props.coinId}\"){\r\n                currency\r\n                total\r\n                usd\r\n                coinId\r\n                priceChangePercentage1hInCurrency\r\n                priceChangePercentage24hInCurrency\r\n                priceChangePercentage7dInCurrency\r\n            }\r\n            }\r\n    }\r\n    `)\r\n\r\n    if(loading) return <div>Loading...</div>\r\n    if(error)   return <div>Error</div>\r\n    \r\n    return(\r\n        <div className={classes.coin_root}>\r\n            <div>{data}</div>\r\n        </div>\r\n    )\r\n}","// import * as serviceWorker from 'serviceWorker';\r\n\r\n\r\n\r\nexport function notification() {\r\n\r\n}\r\n\r\nexport function displayNotification() {\r\n  if (Notification.permission == 'granted') {\r\n    navigator.serviceWorker.getRegistration().then(function (reg) {\r\n      var options = {\r\n        body: 'Here is a notification body!',\r\n        icon: 'images/example.png',\r\n        vibrate: [100, 50, 100],\r\n        data: {\r\n          dateOfArrival: Date.now(),\r\n          primaryKey: 1\r\n        }\r\n      };\r\n      reg.showNotification('Hello world!', options);\r\n\r\n      reg.pushManager.getSubscription().then(function (sub) {\r\n        if (sub === null) {\r\n          // Update UI to ask user to register for Push\r\n          console.log('Not subscribed to push service!');\r\n          subscribeUser()\r\n        } else {\r\n          // We have a subscription, update the database\r\n          console.log('Subscription object: ', JSON.stringify(sub));\r\n        }\r\n      });\r\n\r\n    });\r\n  }\r\n}\r\n\r\nfunction urlBase64ToUint8Array(base64String) {\r\n  const padding = '='.repeat((4 - base64String.length % 4) % 4);\r\n  const base64 = (base64String + padding)\r\n    .replace(/\\-/g, '+')\r\n    .replace(/_/g, '/')\r\n    ;\r\n  let rawData\r\n\r\n  rawData = atob(base64);\r\n  return Uint8Array.from([...rawData].map((char) => char.charCodeAt(0)));\r\n}\r\n\r\nconst applicationServerKey = urlBase64ToUint8Array('BOnPOdBMs6jPhfJ_F9EpeyiPOc2dX4niC6-V_zSZcRSn2TwRkI4i_TeLqxiSTSiPgm89355SeAZFZnJp9QMfWqY')\r\n\r\nexport async function subscribeUser(func) {\r\n  Notification.requestPermission(status => {\r\n    console.log('Notification permission status:', status);\r\n  });\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(function (reg) {\r\n\r\n      reg.pushManager.subscribe({\r\n        userVisibleOnly: true,\r\n        applicationServerKey: applicationServerKey\r\n      }).then(async function (sub) {\r\n        console.log('Endpoint URL: ', sub.endpoint);\r\n        console.log('Origin: ', new URL(sub.endpoint).origin)\r\n        console.log(sub.toJSON())\r\n        func(sub.toJSON())\r\n        try {\r\n          await reg.periodicSync.register('sub-refresh', {\r\n            minInterval: 10 * 1000,\r\n          })\r\n        } catch {\r\n          console.log('Periodic Sync could not be registered!');\r\n        }\r\n        return sub\r\n      }).catch(function (e) {\r\n        if (Notification.permission === 'denied') {\r\n          console.warn('Permission for notifications was denied');\r\n        } else {\r\n          console.error('Unable to subscribe to push', e);\r\n        }\r\n      });\r\n    })\r\n\r\n  }\r\n}","import React, {useState, useEffect} from 'react'\r\nimport { makeStyles } from '@material-ui/core/styles'\r\nimport TextField from '@material-ui/core/TextField'\r\nimport Button from '@material-ui/core/Button'\r\nimport {subscribeUser} from 'components/push-notification'\r\nimport {updateSubscription} from 'services'\r\nimport { useMutation, gql } from '@apollo/client'\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        display: 'flex',\r\n        flexFlow: 'column',\r\n        '& > *': {\r\n            margin: theme.spacing(1),\r\n            width: '25ch',\r\n      },\r\n    },\r\n    formControl: {\r\n        margin: theme.spacing(1),\r\n        minWidth: 120,\r\n      },\r\n  }));\r\n\r\nconst ADD_SUBSCRIPTION = gql`\r\nmutation addSubscription($endpoint: String!, $p256dh: String!, $auth: String!){\r\n  addSubscription(endpoint: $endpoint, p256dh: $p256dh, auth: $auth){\r\n    stuff\r\n  }\r\n}\r\n`\r\n\r\nexport default function Settings(props){\r\n    const [add_subscription, { data }] = useMutation(ADD_SUBSCRIPTION)\r\n    const classes = useStyles()\r\n\r\n    if(props.invisible) return <></>\r\n\r\n    async function addSubscriptionInfo(){\r\n        await subscribeUser( (sub) => add_subscription({\r\n                variables: {\r\n                endpoint: sub.endpoint, \r\n                p256dh: sub.keys.p256dh,\r\n                auth: sub.keys.auth\r\n            }\r\n        }))\r\n        console.log('this')\r\n    }\r\n\r\n    return(\r\n        <div className={classes.root}>\r\n            <Button variant=\"contained\" color=\"primary\" onClick={addSubscriptionInfo}>Subscribe Push Notification</Button>\r\n        </div>\r\n    )\r\n}","import React from 'react';\r\nimport clsx from 'clsx';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport SwipeableDrawer from '@material-ui/core/SwipeableDrawer';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport Menu from '@material-ui/icons/Menu';\r\nimport List from '@material-ui/core/List';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport InboxIcon from '@material-ui/icons/MoveToInbox';\r\nimport MailIcon from '@material-ui/icons/Mail';\r\n\r\nconst useStyles = makeStyles({\r\n  list: {\r\n    width: 250,\r\n  },\r\n  fullList: {\r\n    width: 'auto',\r\n  },\r\n  menuButton: {\r\n      position: 'absolute',\r\n      left: '2rem',\r\n      top: '2rem'\r\n  }\r\n});\r\n\r\nexport default function Drawer(props) {\r\n  const classes = useStyles();\r\n  const [state, setState] = React.useState(false);\r\n\r\n  const toggleDrawer = (open) => (event) => {\r\n    if (event && event.type === 'keydown' && (event.key === 'Tab' || event.key === 'Shift')) {\r\n      return;\r\n    }\r\n\r\n    setState(open);\r\n  };\r\n\r\n  const list = (anchor) => (\r\n    <div\r\n      className={clsx(classes.list, {\r\n        [classes.fullList]: anchor === 'top' || anchor === 'bottom',\r\n      })}\r\n      role=\"presentation\"\r\n      onClick={toggleDrawer(false)}\r\n      onKeyDown={toggleDrawer(false)}\r\n    >\r\n      <List>\r\n        {props.views? props.views.map((view, index) => (\r\n          <ListItem button key={view.key} onClick={() => props.setView(view.text)}>\r\n            {/* <ListItemIcon>{index % 2 === 0 ? <InboxIcon /> : <MailIcon />}</ListItemIcon> */}\r\n            <ListItemText primary={view.text} />\r\n          </ListItem>\r\n        ))\r\n        :null}\r\n        <ListItem button key=\"logout\" onClick={() => props.logout()}>\r\n            <ListItemText primary=\"Logout\" />\r\n          </ListItem>\r\n      </List>\r\n    </div>\r\n  );\r\n\r\n  return (\r\n    <div>\r\n        <div className={classes.menuButton}>\r\n            <IconButton  color=\"primary\" aria-label=\"upload picture\" component=\"span\" onClick={toggleDrawer(true)}>\r\n            <Menu />\r\n            </IconButton>\r\n        </div>\r\n        <SwipeableDrawer\r\n        anchor={'left'}\r\n        open={state}\r\n        onClose={toggleDrawer(false)}\r\n        onOpen={toggleDrawer(true)}\r\n        >\r\n        {list('left')}\r\n        </SwipeableDrawer>\r\n    </div>\r\n  );\r\n}","import React, {useState} from 'react'\r\nimport { makeStyles } from '@material-ui/core/styles'\r\n\r\nconst styles = makeStyles((theme) => ({\r\n    scene: {\r\n        width: '210px',\r\n        height: '140px',\r\n        position: 'relative',\r\n        perspective: '1000px'\r\n    },\r\n    carousel:{\r\n        width: '100%',\r\n        height: '100%',\r\n        position: 'absolute',\r\n        transformStyle: 'preserve-3d',\r\n    },\r\n    carousel__cell: {\r\n        position: 'absolute',\r\n        width: '190px',\r\n        height: '120px',\r\n        left: '10px',\r\n        top: '10px',\r\n    }\r\n  }));\r\n\r\nexport default function Carousel(props){\r\n\r\n  const [carousel, setCarousel] = useState(props.children)\r\n  const [cells, setCells] = useState()\r\n  const [cellCount, setCellCount] = useState()\r\n  const [selectedIndex, setSelectedIndex] = useState(0)\r\n\r\n    return(\r\n        <div class={styles.carousel}>\r\n            <div className={styles.carousel}>\r\n                {\r\n                    carousel.map((child, index) => <div className={styles.carousel__cell} style={{ transform: `rotateY(  ${index*40}deg)` }}>{child}</div>)\r\n                }\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n\r\n","import React, { useState, useEffect } from 'react'\r\nimport logo from './logo.svg'\r\nimport './App.css'\r\nimport { ApolloClient, createHttpLink, InMemoryCache } from '@apollo/client'\r\nimport { onError } from \"@apollo/client/link/error\"\r\nimport { setContext } from '@apollo/client/link/context'\r\nimport { ApolloProvider } from '@apollo/client'\r\n// import {  } from '@apollo/link-error'\r\n// import { RestLink } from 'apollo-link-rest'\r\nimport { createMuiTheme, makeStyles, ThemeProvider } from '@material-ui/core/styles'\r\nimport jwt_decode from \"jwt-decode\"\r\n\r\nimport Login from 'components/Login'\r\nimport AddAccount from 'components/add-account'\r\nimport AddWallet from 'components/add-wallet'\r\nimport AddToken from 'components/add-token'\r\nimport Balance from 'components/balance'\r\nimport Coin from 'components/coin'\r\nimport Settings from 'components/settings'\r\nimport Drawer from 'components/drawer'\r\nimport Carousel from 'views/carousel'\r\nimport { API_URL, refresh_token, createGQL } from 'services'\r\nimport jwt from 'jsonwebtoken'\r\n\r\nconst darkTheme = createMuiTheme({\r\n  palette: {\r\n    type: 'dark',\r\n  },\r\n});\r\n\r\nconst views = [\r\n  { key: 'Login', text: 'Login' },\r\n  { key: 'AddAccount', text: 'Add Account' },\r\n  { key: 'Add Wallet', text: 'Add Wallet' },\r\n  { key: 'Add Token', text: 'Add Token' },\r\n  { key: 'Balance', text: 'Balance' },\r\n  { key: 'Settings', text: 'Settings' }\r\n]\r\n\r\nconst logout = () => {\r\n  window.location.reload()\r\n}\r\n\r\nfunction App() {\r\n  const [token, setToken] = useState()\r\n  const [client, setClient] = useState()\r\n  const [item, setItem] = useState()\r\n  const [loggedIn, setLoggedIn] = useState(false)\r\n  const [view, setView] = useState('Login')\r\n\r\n  useEffect(() => {\r\n    if (!loggedIn && view !== 'Login') {\r\n      setView('Login')\r\n    }\r\n    else if (loggedIn && !client && token) {\r\n      setClient(createGQL(token))\r\n      setView('Balance')\r\n    }\r\n  }, [loggedIn, token])\r\n\r\n  const views = [\r\n    { key: 'Login', text: 'Login' },\r\n    { key: 'AddAccount', text: 'Add Account' },\r\n    { key: 'Add Wallet', text: 'Add Wallet' },\r\n    { key: 'Add Token', text: 'Add Token' },\r\n    { key: 'Balance', text: 'Balance' },\r\n    { key: 'Settings', text: 'Settings' }\r\n  ]\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <div className=\"App-header\">\r\n        <ThemeProvider theme={darkTheme}>\r\n          {view === 'Login' && <Login loggedIn={loggedIn} setLoggedIn={setLoggedIn} setToken={setToken} setView={setView} />}\r\n\r\n          {client && <ApolloProvider client={client}>\r\n            {<Drawer views={views} setView={setView} logout={logout} />}\r\n            {loggedIn && view === 'Balance' &&  <Balance />}\r\n            {loggedIn && view == 'Settings' &&  <Settings />}\r\n            {/* {loggedIn && view === 'Add Account' && <AddAccount />} */}\r\n            {loggedIn && view === 'Add Wallet' && <AddWallet />}\r\n            {loggedIn && view === 'Add Token' && <AddToken />}\r\n            {/* {loggedIn && view == 'Settings' && <Settings getQuery={get_query} />} */}\r\n          </ApolloProvider>}\r\n        </ThemeProvider>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://cra.link/PWA\r\nserviceWorkerRegistration.register();\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}