{"version":3,"sources":["logo.svg","services/index.js","components/Login/index.js","components/add-account/index.js","components/add-wallet/index.jsx","components/add-token/index.jsx","components/user-heartbeat/index.js","components/balance-list/index.js","components/balance/index.js","components/push-notification/index.js","components/settings/index.jsx","components/drawer/index.js","views/carousel/index.js","App.js","serviceWorkerRegistration.js","reportWebVitals.js","index.js"],"names":["API_URL","fetcher","gql","token","a","fetch","method","cache","headers","body","JSON","stringify","response","json","refresh_token","old","result","data","updateToken","Dexie","version","stores","useStyles","makeStyles","theme","root","display","flexFlow","margin","spacing","width","Login","props","useState","username","setUsername","password","setPassword","classes","loggedIn","login","console","log","then","payload","setToken","setLoggedIn","setView","className","TextField","id","variant","value","onChange","ev","target","label","type","Button","color","onClick","formControl","minWidth","MY_BALANCE","UserHeartbeat","alive","setAlive","useQuery","pollInterval","loading","error","useEffect","me","last_update","Date","lastUpdate","height","viewBox","transform","fill","d","attributeName","values","dur","repeatCount","additive","createUseStyles","list","row_root","gridTemplateColumns","gridTemplateRows","gridTemplateAreas","marginTop","border","boxSizing","padding","backgroundColor","row_top","row_image","background","fontSize","justifyContent","alignItems","card_title","gridArea","justifySelf","icon","percentage","fontWeight","table","alignmContent","divider","BalanceList","Row","currency","toLowerCase","Math","round","portfolio_percentage","priceChangePercentage1hInCurrency","priceChangePercentage24hInCurrency","priceChangePercentage7dInCurrency","map","Balance","usd","setUsd","listData","setlistData","above_1","Object","portfolio","filter","parseFloat","sort","b","reverse","portfolioValue","applicationServerKey","base64String","rawData","base64","repeat","length","replace","atob","Uint8Array","from","char","charCodeAt","urlBase64ToUint8Array","subscribeUser","func","Notification","requestPermission","status","navigator","serviceWorker","ready","reg","pushManager","subscribe","userVisibleOnly","sub","endpoint","URL","origin","toJSON","periodicSync","register","minInterval","catch","e","permission","warn","ADD_SUBSCRIPTION","Settings","useMutation","add_subscription","invisible","variables","p256dh","keys","auth","fullList","menuButton","position","left","top","Drawer","anchor","React","state","setState","toggleDrawer","open","event","key","IconButton","aria-label","component","SwipeableDrawer","onClose","onOpen","clsx","role","onKeyDown","List","views","view","index","ListItem","button","text","ListItemText","primary","logout","scene","perspective","carousel","transformStyle","carousel__cell","darkTheme","createMuiTheme","palette","App","client","setClient","window","location","reload","update_token","new_token","interval","setInterval","clearInterval","fed_token","httpLink","createHttpLink","uri","authLink","setContext","_","authorization","errorLink","onError","graphQLErrors","networkError","err","extensions","code","bodyText","ApolloClient","link","concat","InMemoryCache","createGQL","ThemeProvider","isLocalhost","Boolean","hostname","match","registerValidSW","swUrl","config","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","process","href","addEventListener","contentType","get","indexOf","unregister","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"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","file":"static/js/main.8ac3b288.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import { assert } from 'util'\r\n// import Dexie from 'dexie'\r\n\r\nlet url\r\nif (process.env.NODE_ENV === 'development') url = 'http://localhost:8000'\r\nelse url = 'https://server:8000'\r\n\r\nexport const API_URL = url\r\n\r\n// const db = new Dexie('python-trader');\r\n// db.version(1).stores({\r\n//   token: \"++id,token\"\r\n// });\r\n\r\nexport const fetcher = async (gql, token) => {\r\n  const response = await fetch(API_URL + '/graphql', {\r\n    method: 'POST',\r\n    cache: 'no-cache',\r\n    headers: {\r\n      'Content-Type': 'application/json',\r\n      'Authorization': `Bearer ${token}`,\r\n    },\r\n    body: JSON.stringify({\"query\": gql})\r\n  })\r\n\r\n  return response.json()\r\n}\r\n\r\nexport const update_token = (token) => `\r\nmutation{\r\n  updateToken(token: \"${token}\"){\r\n    token\r\n  }\r\n}\r\n`\r\n\r\nexport const refresh_token = async (old) => {\r\n  const result = await fetcher(update_token(old), old)\r\n  return result.data.updateToken.token\r\n}\r\n\r\nexport const user_balance = `\r\n{\r\n    binance{\r\n        balance{\r\n        currency\r\n        total\r\n        usd\r\n        }\r\n    }\r\n    cryptoCdc{\r\n        balance{\r\n        currency\r\n        total\r\n        usd\r\n        }\r\n    }\r\n    gateio{\r\n        balance{\r\n        currency\r\n        total\r\n        usd\r\n        }\r\n    }\r\n}\r\n`\r\nexport const my_balance = () => `\r\nquery{\r\n  me{\r\n    portfolio{\r\n      currency\r\n      total\r\n      usd\r\n    }\r\n  }\r\n}\r\n\r\n`\r\n\r\nexport const get_exchanges = () => `\r\nquery{\r\n    exchanges{\r\n        id\r\n        name\r\n    }\r\n}\r\n`\r\n\r\nexport const get_wallet_types = () => `\r\nquery{\r\n  walletTypes{\r\n    id\r\n    name\r\n  }\r\n}\r\n`\r\n\r\nexport const add_account = (api_key, api_secret, exchange_id) => `\r\nmutation{\r\n    addAccount(apiKey:\"${api_key}\", secret: \"${api_secret}\", exchangeId: \"${exchange_id}\"){\r\n      account{\r\n        apiKey\r\n      }\r\n    }\r\n  }\r\n`\r\n\r\nexport const add_wallet = (name, address, wallet_type_id) => `\r\nmutation{\r\n  addWallet(name: \"${name}\", address: \"${address}\", walletType: \"${wallet_type_id}\"){\r\n    wallet{\r\n      name\r\n    }\r\n  }\r\n}\r\n`\r\nexport const add_token = (token, wallet_name) => `\r\nmutation{\r\n  addToken(token:\"${token}\", walletName: \"${wallet_name}\"){\r\n    token\r\n  }\r\n}\r\n`\r\n\r\nexport const get_accounts = () => `\r\nquery{\r\n    accounts{\r\n          exchange{\r\n        name\r\n      }\r\n    }\r\n  }\r\n`\r\n\r\nexport const get_wallets = () => `\r\nquery{\r\n  wallets{\r\n    name\r\n  }\r\n}\r\n`\r\n\r\nexport const get_exchange_balance = (exchange) => {\r\n  const exchange_query = (ex) => `\r\n  ${ex}{\r\n      balance{\r\n        currency\r\n        available\r\n        usd\r\n      }\r\n    } \r\n  `\r\n  if (!Array.isArray(exchange)) {\r\n    exchange = [exchange]\r\n  }\r\n\r\n  return 'query{' + exchange.map(ex => exchange_query(ex.exchange.name)).join('\\n') + '}'\r\n}\r\n\r\nexport const updateSubscription = (subinfo) => {\r\n  console.log(subinfo)\r\n  return `\r\nmutation{\r\n  addSubscription(endpoint: \"${subinfo.endpoint}\", expirationTime: \"${subinfo.expirationTime}\", p256dh: \"${subinfo.keys.p256dh}\", auth: \"${subinfo.keys.auth}\"){\r\n    stuff\r\n  }\r\n}\r\n`\r\n}\r\n","import React, { useState } from 'react'\nimport { makeStyles } from '@material-ui/core/styles';\nimport TextField from '@material-ui/core/TextField';\nimport Button from '@material-ui/core/Button';\nimport Dexie from 'dexie'\n\nimport { API_URL } from 'services'\n\nconst db = new Dexie('python-trader');\ndb.version(1).stores({\n  token: \"++id,token\"\n});\n\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        display: 'flex',\n        flexFlow: 'column',\n        '& > *': {\n            margin: theme.spacing(1),\n            width: '25ch',\n        },\n    },\n}));\n\nexport default function Login(props) {\n    const [username, setUsername] = useState('')\n    const [password, setPassword] = useState('')\n    const classes = useStyles();\n\n    if (props.loggedIn) return <></>\n\n    const login = async () => {\n        console.log(\"Sending websocket data\")\n        const payload = await fetch( API_URL + '/login', { method: 'POST', body: JSON.stringify({ 'username': username, 'password': password }) }).then(result => result.json())\n        props.setToken(payload.token)\n        // await props.getQuery({'username': username, 'password': password})\n        props.setLoggedIn(true, props.setView('Balance'))\n    }\n\n    return (\n        <div className={classes.root}>\n            <TextField\n                id=\"outlined-basic\"\n                variant=\"outlined\"\n                value={username}\n                onChange={ev => setUsername(ev.target.value)}\n                label=\"Username\"\n            />\n            <TextField\n                id=\"outlined-basic\"\n                variant=\"outlined\"\n                value={password}\n                onChange={ev => setPassword(ev.target.value)}\n                label=\"Password\"\n                type=\"password\"\n            />\n            <Button variant=\"contained\" color=\"primary\" onClick={login}>Login</Button>\n        </div>\n    )\n}","import React, {useState, useEffect} from 'react'\r\nimport { makeStyles } from '@material-ui/core/styles'\r\nimport TextField from '@material-ui/core/TextField'\r\nimport Button from '@material-ui/core/Button'\r\nimport Select from '@material-ui/core/Select'\r\nimport MenuItem from '@material-ui/core/MenuItem'\r\nimport InputLabel from '@material-ui/core/InputLabel'\r\nimport FormControl from '@material-ui/core/FormControl'\r\nimport {get_exchanges, add_account} from 'services'\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        display: 'flex',\r\n        flexFlow: 'column',\r\n        '& > *': {\r\n            margin: theme.spacing(1),\r\n            width: '25ch',\r\n      },\r\n    },\r\n    formControl: {\r\n        margin: theme.spacing(1),\r\n        minWidth: 120,\r\n      },\r\n  }));\r\n\r\nexport default function AddAccount(props){\r\n    const [apiKey, setApiKey] = useState('')\r\n    const [apiSecret, setApiSecret] = useState('')\r\n    const [exchange, setExchange] = useState()\r\n    const [menuItems, setMenuItems] = useState()\r\n    const classes = useStyles()\r\n\r\n    async function updateExchanges(){\r\n        const result = await props.getQuery(get_exchanges())\r\n        console.log(result)\r\n        console.log('im triggered')\r\n        setMenuItems(result.payload.exchanges)\r\n    }\r\n\r\n    async function addAccount(){\r\n        await props.getQuery(add_account(apiKey, apiSecret, exchange))\r\n        console.log('this')\r\n    }\r\n\r\n    useEffect(() => {\r\n        console.log('im triggered')\r\n        updateExchanges()\r\n    }, [])\r\n\r\n    if(props.invisible) return <></>\r\n\r\n    return(\r\n        <div className={classes.root}>\r\n            <FormControl className={classes.formControl}>\r\n                <InputLabel id=\"demo-simple-select-label\">Exchange</InputLabel>\r\n                <Select\r\n                labelId=\"demo-simple-select-label\"\r\n                id=\"demo-simple-select\"\r\n                value={exchange}\r\n                onChange={(ev) => setExchange(ev.target.value)}\r\n                >\r\n                {\r\n                    menuItems && (\r\n                        menuItems.map(item => <MenuItem value={item.id}>{item.name}</MenuItem>)\r\n                    )\r\n                }\r\n                </Select>\r\n            </FormControl>\r\n            <TextField \r\n                id=\"outlined-basic\"  \r\n                variant=\"outlined\" \r\n                value={apiKey} \r\n                onChange={ev => setApiKey(ev.target.value)}\r\n                label=\"Api Key\"\r\n                autocomplete=\"off\"\r\n            />\r\n            <TextField \r\n                id=\"outlined-basic\" \r\n                variant=\"outlined\" \r\n                value={apiSecret} \r\n                onChange={ev => setApiSecret(ev.target.value)}\r\n                label=\"Api Secret\"\r\n                type=\"password\"\r\n                autocomplete=\"off\"\r\n            />\r\n            <Button variant=\"contained\" color=\"primary\" onClick={addAccount}>Add Account</Button>\r\n        </div>\r\n    )\r\n}","import React, {useState, useEffect} from 'react'\r\nimport { makeStyles } from '@material-ui/core/styles'\r\nimport TextField from '@material-ui/core/TextField'\r\nimport Button from '@material-ui/core/Button'\r\nimport Select from '@material-ui/core/Select'\r\nimport MenuItem from '@material-ui/core/MenuItem'\r\nimport InputLabel from '@material-ui/core/InputLabel'\r\nimport FormControl from '@material-ui/core/FormControl'\r\nimport {get_wallet_types, add_wallet} from 'services'\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        display: 'flex',\r\n        flexFlow: 'column',\r\n        '& > *': {\r\n            margin: theme.spacing(1),\r\n            width: '25ch',\r\n      },\r\n    },\r\n    formControl: {\r\n        margin: theme.spacing(1),\r\n        minWidth: 120,\r\n      },\r\n  }));\r\n\r\nexport default function AddWallet(props){\r\n    const [name, setName] = useState('')\r\n    const [address, setAddress] = useState('')\r\n    const [walletType, setWalletType] = useState()\r\n    const [menuItems, setMenuItems] = useState()\r\n    const classes = useStyles()\r\n\r\n    async function updateWalletTypes(){\r\n        const result = await props.getQuery(get_wallet_types())\r\n        console.log(result)\r\n        console.log('im triggered')\r\n        setMenuItems(result.payload.walletTypes)\r\n    }\r\n\r\n    async function addAccount(){\r\n        await props.getQuery(add_wallet(name, address, walletType))\r\n        console.log('this')\r\n    }\r\n\r\n    useEffect(() => {\r\n        console.log('im triggered')\r\n        updateWalletTypes()\r\n    }, [])\r\n\r\n    if(props.invisible) return <></>\r\n\r\n    return(\r\n        <div className={classes.root}>\r\n            <FormControl className={classes.formControl}>\r\n                <InputLabel id=\"demo-simple-select-label\">Wallet Type</InputLabel>\r\n                <Select\r\n                    labelId=\"demo-simple-select-label\"\r\n                    id=\"demo-simple-select\"\r\n                    value={walletType}\r\n                    onChange={(ev) => setWalletType(ev.target.value)}\r\n                >\r\n                {\r\n                    menuItems && (\r\n                        menuItems.map(item => <MenuItem value={item.id}>{item.name}</MenuItem>)\r\n                    )\r\n                }\r\n                </Select>\r\n            </FormControl>\r\n            <TextField \r\n                id=\"outlined-basic\"  \r\n                variant=\"outlined\" \r\n                value={name} \r\n                onChange={ev => setName(ev.target.value)}\r\n                label=\"Name\"\r\n                autocomplete=\"off\"\r\n            />\r\n            <TextField \r\n                id=\"outlined-basic\" \r\n                variant=\"outlined\" \r\n                value={address} \r\n                onChange={ev => setAddress(ev.target.value)}\r\n                label=\"Address\"\r\n                autocomplete=\"off\"\r\n            />\r\n            <Button variant=\"contained\" color=\"primary\" onClick={addAccount}>Add wallet</Button>\r\n        </div>\r\n    )\r\n}","import React, {useState, useEffect} from 'react'\r\nimport { makeStyles } from '@material-ui/core/styles'\r\nimport TextField from '@material-ui/core/TextField'\r\nimport Button from '@material-ui/core/Button'\r\nimport Select from '@material-ui/core/Select'\r\nimport MenuItem from '@material-ui/core/MenuItem'\r\nimport InputLabel from '@material-ui/core/InputLabel'\r\nimport FormControl from '@material-ui/core/FormControl'\r\nimport {get_wallets, add_token} from 'services'\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        display: 'flex',\r\n        flexFlow: 'column',\r\n        '& > *': {\r\n            margin: theme.spacing(1),\r\n            width: '25ch',\r\n      },\r\n    },\r\n    formControl: {\r\n        margin: theme.spacing(1),\r\n        minWidth: 120,\r\n      },\r\n  }));\r\n\r\nexport default function AddToken(props){\r\n    const [token, setName] = useState('')\r\n    const [walletName, setWalletName] = useState('')\r\n    const [menuItems, setMenuItems] = useState()\r\n    const classes = useStyles()\r\n\r\n    async function updateWallets(){\r\n        const result = await props.getQuery(get_wallets())\r\n        console.log(result)\r\n        console.log('im triggered')\r\n        setMenuItems(result.payload.wallets)\r\n    }\r\n\r\n    async function addAccount(){\r\n        await props.getQuery(add_token(token, walletName))\r\n        console.log('this')\r\n    }\r\n\r\n    useEffect(() => {\r\n        console.log('im triggered')\r\n        updateWallets()\r\n    }, [])\r\n\r\n    if(props.invisible) return <></>\r\n\r\n    return(\r\n        <div className={classes.root}>\r\n            <FormControl className={classes.formControl}>\r\n                <InputLabel id=\"demo-simple-select-label\">Wallet</InputLabel>\r\n                <Select\r\n                    labelId=\"demo-simple-select-label\"\r\n                    id=\"demo-simple-select\"\r\n                    value={walletName}\r\n                    onChange={(ev) => setWalletName(ev.target.value)}\r\n                >\r\n                {\r\n                    menuItems && (\r\n                        menuItems.map(item => <MenuItem value={item.name}>{item.name}</MenuItem>)\r\n                    )\r\n                }\r\n                </Select>\r\n            </FormControl>\r\n            <TextField \r\n                id=\"outlined-basic\"  \r\n                variant=\"outlined\" \r\n                value={token} \r\n                onChange={ev => setName(ev.target.value)}\r\n                label=\"Token\"\r\n                autocomplete=\"off\"\r\n            />\r\n            <Button variant=\"contained\" color=\"primary\" onClick={addAccount}>Add token</Button>\r\n        </div>\r\n    )\r\n}","import React, { useState, useEffect } from 'react'\r\nimport { useQuery, gql } from '@apollo/client'\r\n\r\nconst MY_BALANCE = gql`\r\nquery{\r\n    me{\r\n        lastUpdate\r\n    }\r\n  }\r\n`\r\n\r\nexport default function UserHeartbeat(props) {\r\n    const [alive, setAlive] = useState(true)\r\n    const { loading, error, data } = useQuery(MY_BALANCE, {\r\n        pollInterval: 50000,\r\n    })\r\n\r\n    useEffect(()=>{\r\n        if(data && 'me' in data && 'lastUpdate' in data.me){\r\n            const last_update = new Date(data.me.lastUpdate * 1000)\r\n            if(((new Date()) - last_update) > 1200000){\r\n                setAlive(false)\r\n            }\r\n            else if(!alive && ((new Date()) - last_update) < 1200000){\r\n                setAlive(true)\r\n            }\r\n        }\r\n    }, [data])\r\n\r\n    if (loading) return <p>Loading...</p>\r\n    if (error) return <p>Error :(</p>\r\n\r\n    return (\r\n        <svg width=\"50\" height=\"50\" viewBox=\"0 0 200 200\">\r\n            <g transform=\"translate(100 100)\">\r\n                <path transform=\"translate(-50 -50)\" fill={ alive? \"tomato\" : \"gray\"} d=\"M92.71,7.27L92.71,7.27c-9.71-9.69-25.46-9.69-35.18,0L50,14.79l-7.54-7.52C32.75-2.42,17-2.42,7.29,7.27v0 c-9.71,9.69-9.71,25.41,0,35.1L50,85l42.71-42.63C102.43,32.68,102.43,16.96,92.71,7.27z\"></path>\r\n                { alive && <animateTransform\r\n                    attributeName=\"transform\"\r\n                    type=\"scale\"\r\n                    values=\"1; 1.5; 1.25; 1.5; 1.5; 1; 1; 1; 1; 1;\"\r\n                    dur=\"2s\"\r\n                    repeatCount=\"indefinite\"\r\n                    additive=\"sum\">\r\n                </animateTransform>}\r\n            </g>\r\n        </svg>\r\n    )\r\n}","import React from 'react'\r\nimport { createUseStyles } from 'react-jss'\r\nimport PropTypes from 'prop-types'\r\nimport 'fonts/cryptofont.css'\r\n\r\nconst useStyles = createUseStyles({\r\n    list: {\r\n        display: 'flex',\r\n        flexFlow: 'column',\r\n        width: '100%',\r\n        height: 'fit-content'\r\n    },\r\n    row_root: {\r\n        display: 'grid',\r\n        gridTemplateColumns:    '1fr 2fr 1fr',\r\n        gridTemplateRows:       '1fr 1fr',\r\n        gridTemplateAreas: `\r\n        'icon table percent'\r\n        'icon  table percent'\r\n        `\r\n       ,\r\n        height: 'fit-content',\r\n        marginTop: '.5rem',\r\n        // background: 'rgba(50,100,50,.5',\r\n        border: '1px solid rgba(100,100,200,.5)',\r\n        boxSizing: 'border-box',\r\n        padding: '.5rem',\r\n        backgroundColor: 'rgba(100,100,200,.4)',\r\n    },\r\n    \r\n    row_top: {\r\n        display: 'flex',\r\n    },\r\n    row_image: {\r\n        width: '2.5rem',\r\n        height: '2rem',\r\n        background: 'blue',\r\n        fontSize: '1rem',\r\n        display: 'flex',\r\n        justifyContent: 'center',\r\n        alignItems: 'center'\r\n    },\r\n    card_title: {\r\n        gridArea: 'name',\r\n        fontSize: '1rem',\r\n        justifySelf: 'start'\r\n    },\r\n    icon:{\r\n        display: 'flex',\r\n        justifyContent: 'space-evenly',\r\n        alignItems: 'center',\r\n        gridArea: 'icon',\r\n    },\r\n    percentage: {\r\n        gridArea: 'percent',\r\n        fontWeight: 700\r\n    },\r\n    table:{\r\n        gridArea: 'table',\r\n        display: 'grid',\r\n        gridTemplateColumns:    '1fr 1fr 1fr',\r\n        gridTemplateRows:       '1fr 1fr',\r\n        fontSize: '1rem',\r\n        alignmContent: 'center',\r\n        alignItems: 'center'\r\n    },\r\n    divider: {\r\n        gridArea: 'line',\r\n        background: 'blue'\r\n    }\r\n})\r\n\r\n\r\n\r\nexport default function BalanceList(props) {\r\n    const classes = useStyles()\r\n\r\n    const Row = props => {\r\n        return (\r\n            props && <div>\r\n                <div className={classes.row_root}>\r\n                    <div className={classes.icon}>\r\n                        <i className={`cf cf-${props.currency.toLowerCase()}`}/>\r\n                        <div className={classes.card_title}>{props.currency}</div>    \r\n                    </div>\r\n                    \r\n                    <span className={classes.percentage}>{`${Math.round(props.portfolio_percentage, 2)}%`}</span>\r\n                    <div className={classes.table}>\r\n                        <div>1h</div>\r\n                        <div>24h</div>\r\n                        <div>7d</div>\r\n                        <div>{`${Math.round(props.priceChangePercentage1hInCurrency, 2)}%`}</div>\r\n                        <div>{`${Math.round(props.priceChangePercentage24hInCurrency, 2)}%`}</div>\r\n                        <div>{`${Math.round(props.priceChangePercentage7dInCurrency, 2)}%`}</div>\r\n                    </div>\r\n                    <div className={classes.divider} />\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            {props.data && props.data.map(currency => <Row {...currency} />)}\r\n        </div>\r\n    )\r\n}\r\n\r\nBalanceList.propTypes = {\r\n    data: PropTypes.arrayOf(\r\n        PropTypes.shape({\r\n            portfolio_percentage: PropTypes.number,\r\n            value_usd: PropTypes.number,\r\n            // value_btc: PropTypes.number,\r\n            symbol: PropTypes.string,\r\n\r\n        })\r\n    )\r\n}","import React, {useState, useEffect} from 'react'\r\nimport { makeStyles } from '@material-ui/core/styles'\r\nimport { HorizontalBar } from 'react-chartjs-2'\r\nimport UserHeartbeat from 'components/user-heartbeat'\r\nimport BalanceList from 'components/balance-list'\r\nimport {colors} from 'components/random-color'\r\nimport { useQuery, gql } from '@apollo/client'\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        display: 'flex',\r\n        flexFlow: 'column',\r\n        '& > *': {\r\n            margin: theme.spacing(1),\r\n            width: '25ch',\r\n      },\r\n    },\r\n    formControl: {\r\n        margin: theme.spacing(1),\r\n        minWidth: 120,\r\n      },\r\n  }));\r\n\r\nconst MY_BALANCE = gql`\r\nquery{\r\n    me{\r\n      portfolioValue\r\n      portfolio{\r\n        currency\r\n        total\r\n        usd\r\n        coinId\r\n        priceChangePercentage1hInCurrency\r\n        priceChangePercentage24hInCurrency\r\n        priceChangePercentage7dInCurrency\r\n      }\r\n    }\r\n  }\r\n`\r\n\r\nexport default function Balance(props){\r\n    const [balances, setBalances] = useState()\r\n    const [usd, setUsd] = useState()\r\n    const [listData, setlistData] = useState()\r\n    const classes = useStyles()\r\n    const { loading, error, data } = useQuery(MY_BALANCE, {\r\n        pollInterval: 10000,\r\n      })\r\n\r\n    useEffect(() => {\r\n        if (data){\r\n            const above_1 = Object.values(data.me.portfolio).filter(currency => parseFloat(currency.usd) > 1)\r\n            above_1.sort((a,b) => (a['usd'] > b['usd']) ? 1 : ((b['usd'] > a['usd']) ? -1 : 0)).reverse()\r\n            setlistData(above_1.map(currency =>  {\r\n              return {\r\n                portfolio_percentage: currency['usd']/data.me.portfolioValue * 100,\r\n                ...currency\r\n              }\r\n            }))\r\n            setUsd(data.me.portfolioValue)\r\n        }\r\n    }, [data])\r\n\r\n    if (loading) return <p>Loading...</p>\r\n    if (error) return <p>Error :(</p>\r\n\r\n    return(\r\n        <div className={classes.root}>\r\n            <UserHeartbeat />\r\n            <div>{usd}</div>\r\n            <BalanceList data={listData} />\r\n        </div>\r\n    )\r\n}","// import * as serviceWorker from 'serviceWorker';\r\n\r\n\r\n\r\nexport function notification() {\r\n\r\n}\r\n\r\nexport function displayNotification() {\r\n  if (Notification.permission == 'granted') {\r\n    navigator.serviceWorker.getRegistration().then(function (reg) {\r\n      var options = {\r\n        body: 'Here is a notification body!',\r\n        icon: 'images/example.png',\r\n        vibrate: [100, 50, 100],\r\n        data: {\r\n          dateOfArrival: Date.now(),\r\n          primaryKey: 1\r\n        }\r\n      };\r\n      reg.showNotification('Hello world!', options);\r\n\r\n      reg.pushManager.getSubscription().then(function (sub) {\r\n        if (sub === null) {\r\n          // Update UI to ask user to register for Push\r\n          console.log('Not subscribed to push service!');\r\n          subscribeUser()\r\n        } else {\r\n          // We have a subscription, update the database\r\n          console.log('Subscription object: ', JSON.stringify(sub));\r\n        }\r\n      });\r\n\r\n    });\r\n  }\r\n}\r\n\r\nfunction urlBase64ToUint8Array(base64String) {\r\n  const padding = '='.repeat((4 - base64String.length % 4) % 4);\r\n  const base64 = (base64String + padding)\r\n    .replace(/\\-/g, '+')\r\n    .replace(/_/g, '/')\r\n    ;\r\n  let rawData\r\n\r\n  rawData = atob(base64);\r\n  return Uint8Array.from([...rawData].map((char) => char.charCodeAt(0)));\r\n}\r\n\r\nconst applicationServerKey = urlBase64ToUint8Array('BOnPOdBMs6jPhfJ_F9EpeyiPOc2dX4niC6-V_zSZcRSn2TwRkI4i_TeLqxiSTSiPgm89355SeAZFZnJp9QMfWqY')\r\n\r\nexport async function subscribeUser(func) {\r\n  Notification.requestPermission(status => {\r\n    console.log('Notification permission status:', status);\r\n  });\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(function (reg) {\r\n\r\n      reg.pushManager.subscribe({\r\n        userVisibleOnly: true,\r\n        applicationServerKey: applicationServerKey\r\n      }).then(async function (sub) {\r\n        console.log('Endpoint URL: ', sub.endpoint);\r\n        console.log('Origin: ', new URL(sub.endpoint).origin)\r\n        console.log(sub.toJSON())\r\n        func(sub.toJSON())\r\n        try {\r\n          await reg.periodicSync.register('sub-refresh', {\r\n            minInterval: 10 * 1000,\r\n          })\r\n        } catch {\r\n          console.log('Periodic Sync could not be registered!');\r\n        }\r\n        return sub\r\n      }).catch(function (e) {\r\n        if (Notification.permission === 'denied') {\r\n          console.warn('Permission for notifications was denied');\r\n        } else {\r\n          console.error('Unable to subscribe to push', e);\r\n        }\r\n      });\r\n    })\r\n\r\n  }\r\n}","import React, {useState, useEffect} from 'react'\r\nimport { makeStyles } from '@material-ui/core/styles'\r\nimport TextField from '@material-ui/core/TextField'\r\nimport Button from '@material-ui/core/Button'\r\nimport {subscribeUser} from 'components/push-notification'\r\nimport {updateSubscription} from 'services'\r\nimport { useMutation, gql } from '@apollo/client'\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        display: 'flex',\r\n        flexFlow: 'column',\r\n        '& > *': {\r\n            margin: theme.spacing(1),\r\n            width: '25ch',\r\n      },\r\n    },\r\n    formControl: {\r\n        margin: theme.spacing(1),\r\n        minWidth: 120,\r\n      },\r\n  }));\r\n//   endpoint: \"${subinfo.endpoint}\", expirationTime: \"${subinfo.expirationTime}\", p256dh: \"${subinfo.keys.p256dh}\", auth: \"${subinfo.keys.auth}\")\r\nconst ADD_SUBSCRIPTION = gql`\r\nmutation addSubscription($endpoint: String!, $p256dh: String!, $auth: String!){\r\n  addSubscription(endpoint: $endpoint, p256dh: $p256dh, auth: $auth){\r\n    stuff\r\n  }\r\n}\r\n`\r\n\r\nexport default function Settings(props){\r\n    const [add_subscription, { data }] = useMutation(ADD_SUBSCRIPTION)\r\n    const classes = useStyles()\r\n\r\n    if(props.invisible) return <></>\r\n\r\n    async function addSubscriptionInfo(){\r\n        await subscribeUser( (sub) => add_subscription({\r\n                variables: {\r\n                endpoint: sub.endpoint, \r\n                p256dh: sub.keys.p256dh,\r\n                auth: sub.keys.auth\r\n            }\r\n        }))\r\n        console.log('this')\r\n    }\r\n\r\n    return(\r\n        <div className={classes.root}>\r\n            <Button variant=\"contained\" color=\"primary\" onClick={addSubscriptionInfo}>Subscribe Push Notification</Button>\r\n        </div>\r\n    )\r\n}","import React from 'react';\r\nimport clsx from 'clsx';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport SwipeableDrawer from '@material-ui/core/SwipeableDrawer';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport Menu from '@material-ui/icons/Menu';\r\nimport List from '@material-ui/core/List';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport InboxIcon from '@material-ui/icons/MoveToInbox';\r\nimport MailIcon from '@material-ui/icons/Mail';\r\n\r\nconst useStyles = makeStyles({\r\n  list: {\r\n    width: 250,\r\n  },\r\n  fullList: {\r\n    width: 'auto',\r\n  },\r\n  menuButton: {\r\n      position: 'absolute',\r\n      left: '2rem',\r\n      top: '2rem'\r\n  }\r\n});\r\n\r\nexport default function Drawer(props) {\r\n  const classes = useStyles();\r\n  const [state, setState] = React.useState(false);\r\n\r\n  const toggleDrawer = (open) => (event) => {\r\n    if (event && event.type === 'keydown' && (event.key === 'Tab' || event.key === 'Shift')) {\r\n      return;\r\n    }\r\n\r\n    setState(open);\r\n  };\r\n\r\n  const list = (anchor) => (\r\n    <div\r\n      className={clsx(classes.list, {\r\n        [classes.fullList]: anchor === 'top' || anchor === 'bottom',\r\n      })}\r\n      role=\"presentation\"\r\n      onClick={toggleDrawer(false)}\r\n      onKeyDown={toggleDrawer(false)}\r\n    >\r\n      <List>\r\n        {props.views? props.views.map((view, index) => (\r\n          <ListItem button key={view.key} onClick={() => props.setView(view.text)}>\r\n            {/* <ListItemIcon>{index % 2 === 0 ? <InboxIcon /> : <MailIcon />}</ListItemIcon> */}\r\n            <ListItemText primary={view.text} />\r\n          </ListItem>\r\n        ))\r\n        :null}\r\n        <ListItem button key=\"logout\" onClick={() => props.logout()}>\r\n            <ListItemText primary=\"Logout\" />\r\n          </ListItem>\r\n      </List>\r\n    </div>\r\n  );\r\n\r\n  return (\r\n    <div>\r\n        <div className={classes.menuButton}>\r\n            <IconButton  color=\"primary\" aria-label=\"upload picture\" component=\"span\" onClick={toggleDrawer(true)}>\r\n            <Menu />\r\n            </IconButton>\r\n        </div>\r\n        <SwipeableDrawer\r\n        anchor={'left'}\r\n        open={state}\r\n        onClose={toggleDrawer(false)}\r\n        onOpen={toggleDrawer(true)}\r\n        >\r\n        {list('left')}\r\n        </SwipeableDrawer>\r\n    </div>\r\n  );\r\n}","import React, {useState} from 'react'\r\nimport { makeStyles } from '@material-ui/core/styles'\r\n\r\nconst styles = makeStyles((theme) => ({\r\n    scene: {\r\n        width: '210px',\r\n        height: '140px',\r\n        position: 'relative',\r\n        perspective: '1000px'\r\n    },\r\n    carousel:{\r\n        width: '100%',\r\n        height: '100%',\r\n        position: 'absolute',\r\n        transformStyle: 'preserve-3d',\r\n    },\r\n    carousel__cell: {\r\n        position: 'absolute',\r\n        width: '190px',\r\n        height: '120px',\r\n        left: '10px',\r\n        top: '10px',\r\n    }\r\n  }));\r\n\r\nexport default function Carousel(props){\r\n\r\n  const [carousel, setCarousel] = useState(props.children)\r\n  const [cells, setCells] = useState()\r\n  const [cellCount, setCellCount] = useState()\r\n  const [selectedIndex, setSelectedIndex] = useState(0)\r\n\r\n    return(\r\n        <div class={styles.carousel}>\r\n            <div className={styles.carousel}>\r\n                {\r\n                    carousel.map((child, index) => <div className={styles.carousel__cell} style={{ transform: `rotateY(  ${index*40}deg)` }}>{child}</div>)\r\n                }\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n\r\n","import React, { useState, useEffect } from 'react'\nimport logo from './logo.svg'\nimport './App.css'\nimport { ApolloClient, createHttpLink, InMemoryCache } from '@apollo/client'\nimport { onError } from \"@apollo/client/link/error\"\nimport { setContext } from '@apollo/client/link/context'\nimport { ApolloProvider } from '@apollo/client'\n// import {  } from '@apollo/link-error'\n// import { RestLink } from 'apollo-link-rest'\nimport { createMuiTheme, makeStyles, ThemeProvider } from '@material-ui/core/styles'\nimport jwt_decode from \"jwt-decode\"\n\nimport Login from 'components/Login'\nimport AddAccount from 'components/add-account'\nimport AddWallet from 'components/add-wallet'\nimport AddToken from 'components/add-token'\nimport Balance from 'components/balance'\nimport Settings from 'components/settings'\nimport Drawer from 'components/drawer'\nimport Carousel from 'views/carousel'\nimport { API_URL, refresh_token } from 'services'\n\nconst darkTheme = createMuiTheme({\n  palette: {\n    type: 'dark',\n  },\n});\n\nconst views = [\n  { key: 'Login', text: 'Login' },\n  { key: 'AddAccount', text: 'Add Account' },\n  { key: 'Add Wallet', text: 'Add Wallet' },\n  { key: 'Add Token', text: 'Add Token' },\n  { key: 'Balance', text: 'Balance' },\n  { key: 'Settings', text: 'Settings' }\n]\n\nfunction App() {\n  const [token, setToken] = useState()\n  const [client, setClient] = useState()\n  const [loggedIn, setLoggedIn] = useState(false)\n  const [view, setView] = useState('Login')\n  const [gqlLink, setGQLLink] = useState(false)\n\n  const logout = () => {\n    window.location.reload()\n  }\n\n  function createGQL(fed_token) {\n    const httpLink = createHttpLink({\n      uri: API_URL + '/graphql',\n    });\n    \n    const authLink = setContext((_, { headers }) => {\n      // get the authentication token from local storage if it exists\n      // const token = localStorage.getItem('token');\n      // return the headers to the context so httpLink can read them\n      return {\n        headers: {\n          ...headers,\n          authorization: fed_token ? `Bearer ${fed_token}` : \"\",\n        }\n      }\n    });\n\n    const errorLink = onError(({ graphQLErrors, networkError }) => {\n      if (graphQLErrors) {\n        for (let err of graphQLErrors) {\n          switch (err.extensions.code) {\n            case 'UNAUTHENTICATED': logout()\n          }\n        }\n      }\n      if (networkError){\n        if(networkError.bodyText === 'Signature has expired') logout()\n        else console.log(`[Network error]: ${networkError}`)\n      } \n    })\n    \n    return new ApolloClient({\n      link: authLink.concat(errorLink).concat(httpLink),\n      cache: new InMemoryCache()\n    });\n  }\n\n  \n\n  const update_token = async () => {\n    const new_token = await refresh_token(token)\n    setToken(new_token)\n  }\n\n  useEffect(() => {\n    if (loggedIn) {\n      const interval = setInterval(() => {\n        update_token()\n      }, 15 * 60 * 1000);\n      return () => clearInterval(interval);\n    }\n  }, [loggedIn]);\n\n  // }, [])\n\n  // useEffect(() => {\n  //   if (token) {\n  //     const now = parseInt((new Date).getTime() / 1000)\n  //     const exp = jwt_decode(token).exp\n  //     if (exp < now) {\n  //       logout()\n  //     }\n  //   }\n  //   else if (!token && view !== 'Login') setView('Login')\n  // }, [token])\n\n  useEffect(() => {\n    if (!loggedIn && view !== 'Login') {\n      setView('Login')\n    }\n    else if (loggedIn && !client && token) {\n      setClient(createGQL(token))\n      setView('Balance')\n    }\n  }, [loggedIn, token])\n\n  const views = [\n    { key: 'Login', text: 'Login' },\n    { key: 'AddAccount', text: 'Add Account' },\n    { key: 'Add Wallet', text: 'Add Wallet' },\n    { key: 'Add Token', text: 'Add Token' },\n    { key: 'Balance', text: 'Balance' },\n    { key: 'Settings', text: 'Settings' }\n  ]\n\n  return (\n    <div className=\"App\">\n      <div className=\"App-header\">\n        <ThemeProvider theme={darkTheme}>\n          {view === 'Login' && <Login loggedIn={loggedIn} setLoggedIn={setLoggedIn} setToken={setToken} setView={setView} />}\n\n          {client && <ApolloProvider client={client}>\n            {<Drawer views={views} setView={setView} logout={logout} />}\n            {loggedIn && view === 'Balance' && <Balance />}\n            {loggedIn && view == 'Settings' && <Settings />}\n            {/* <button onClick={displayNotification}>Display Notification</button> */}\n            {/* <Carousel> */}\n\n            {/* {loggedIn && view === 'Add Account' && <AddAccount getQuery={get_query}/>}\n          {loggedIn && view === 'Add Wallet' && <AddWallet getQuery={get_query} />}\n          {loggedIn && view === 'Add Token' && <AddToken getQuery={get_query} />}\n          {loggedIn && view == 'Settings' && <Settings getQuery={get_query} />} */}\n            {/* </Carousel> */}\n          </ApolloProvider>}\n        </ThemeProvider>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://cra.link/PWA\r\nserviceWorkerRegistration.register();\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}